/*
Deployment script for YODA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "YODA"
:setvar DefaultFilePrefix "YODA"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "L:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [CLO]...';


GO
CREATE SCHEMA [CLO]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CLO].[FundRestrictionType]...';


GO
CREATE TABLE [CLO].[FundRestrictionType] (
    [FundRestrictionTypeId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [FundRestrictionTypeName] VARCHAR (100) NULL,
    [DisplayColor]            VARCHAR (100) NULL,
    [SortOrder]               SMALLINT      NULL,
    PRIMARY KEY CLUSTERED ([FundRestrictionTypeId] ASC)
);


GO
PRINT N'Creating [CLO].[RuleField]...';


GO
CREATE TABLE [CLO].[RuleField] (
    [RuleFieldId]       INT      IDENTITY (1, 1) NOT NULL,
    [RuleId]            SMALLINT NOT NULL,
    [RuleSectionTypeId] SMALLINT NULL,
    [FieldId]           SMALLINT NOT NULL,
    [SortOrder]         SMALLINT NULL,
    PRIMARY KEY CLUSTERED ([RuleFieldId] ASC)
);


GO
PRINT N'Creating [CLO].[Field]...';


GO
CREATE TABLE [CLO].[Field] (
    [FieldId]            SMALLINT      IDENTITY (1, 1) NOT NULL,
    [FieldGroupId]       SMALLINT      NOT NULL,
    [FieldName]          VARCHAR (100) NULL,
    [JsonPropertyName]   VARCHAR (100) NULL,
    [FieldTitle]         VARCHAR (100) NULL,
    [JsonFormatString]   VARCHAR (200) NULL,
    [DisplayWidth]       INT           NULL,
    [IsPercentage]       BIT           NULL,
    [SortOrder]          SMALLINT      NULL,
    [FieldType]          SMALLINT      NULL,
    [HeaderCellClass]    VARCHAR (100) NULL,
    [CellClass]          VARCHAR (100) NULL,
    [CellTemplate]       VARCHAR (MAX) NULL,
    [Hidden]             BIT           NULL,
    [PinnedLeft]         BIT           NULL,
    [IsSecurityOverride] BIT           NULL,
    CONSTRAINT [PK_Field] PRIMARY KEY CLUSTERED ([FieldId] ASC)
);


GO
PRINT N'Creating [CLO].[FieldGroup]...';


GO
CREATE TABLE [CLO].[FieldGroup] (
    [FieldGroupId]    SMALLINT      IDENTITY (1, 1) NOT NULL,
    [FieldGroupName]  VARCHAR (100) NULL,
    [SortOrder]       SMALLINT      NULL,
    [DisplayIcon]     VARCHAR (100) NULL,
    [ShowOnPositions] BIT           NULL,
    PRIMARY KEY CLUSTERED ([FieldGroupId] ASC)
);


GO
PRINT N'Creating [CLO].[Rule]...';


GO
CREATE TABLE [CLO].[Rule] (
    [RuleId]                   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [RuleName]                 VARCHAR (100) NULL,
    [ExecutionStoredProcedure] VARCHAR (100) NULL,
    [SortOrder]                SMALLINT      NULL,
    PRIMARY KEY CLUSTERED ([RuleId] ASC)
);


GO
PRINT N'Creating [CLO].[Calculation]...';


GO
CREATE TABLE [CLO].[Calculation] (
    [CalculationId]    INT             IDENTITY (1, 1) NOT NULL,
    [SecurityId]       INT             NOT NULL,
    [YieldBid]         NUMERIC (32, 4) NULL,
    [YieldOffer]       NUMERIC (32, 4) NULL,
    [YieldMid]         NUMERIC (32, 4) NULL,
    [CappedYieldBid]   NUMERIC (32, 4) NULL,
    [CappedYieldOffer] NUMERIC (32, 4) NULL,
    [CappedYieldMid]   NUMERIC (32, 4) NULL,
    [TargetYieldBid]   NUMERIC (32, 4) NULL,
    [TargetYieldOffer] NUMERIC (32, 4) NULL,
    [TargetYieldMid]   NUMERIC (32, 4) NULL,
    [BetterWorseBid]   NUMERIC (32, 4) NULL,
    [BetterWorseOffer] NUMERIC (32, 4) NULL,
    [BetterWorseMid]   NUMERIC (32, 4) NULL,
    [TotalCoupon]      NUMERIC (32, 4) NULL,
    [WARF]             NUMERIC (32, 4) NULL,
    [WARFRecovery]     NUMERIC (32, 4) NULL,
    [Life]             NUMERIC (32, 4) NULL,
    [TotalPar]         NUMERIC (32, 4) NULL,
    [CreatedOn]        DATETIME        NULL,
    [CreatedBy]        VARCHAR (100)   NULL,
    [LastUpdatedOn]    DATETIME        NULL,
    [LastUpdatedBy]    VARCHAR (100)   NULL,
    PRIMARY KEY CLUSTERED ([CalculationId] ASC)
);


GO
PRINT N'Creating [CLO].[User]...';


GO
CREATE TABLE [CLO].[User] (
    [UserId]        INT           IDENTITY (1, 1) NOT NULL,
    [FullName]      VARCHAR (100) NOT NULL,
    [IsCLOAnalyst]  BIT           NULL,
    [IsHFAnalyst]   BIT           NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [CLO].[Rating]...';


GO
CREATE TABLE [CLO].[Rating] (
    [RatingId]      SMALLINT      IDENTITY (1, 1) NOT NULL,
    [RatingDesc]    VARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([RatingId] ASC)
);


GO
PRINT N'Creating [CLO].[LienType]...';


GO
CREATE TABLE [CLO].[LienType] (
    [LienTypeId]    SMALLINT      IDENTITY (1, 1) NOT NULL,
    [LienTypeDesc]  VARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([LienTypeId] ASC)
);


GO
PRINT N'Creating [CLO].[Industry]...';


GO
CREATE TABLE [CLO].[Industry] (
    [IndustryId]    SMALLINT      IDENTITY (1, 1) NOT NULL,
    [IndustryDesc]  VARCHAR (100) NOT NULL,
    [IsSnP]         BIT           NOT NULL,
    [IsMoody]       BIT           NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([IndustryId] ASC)
);


GO
PRINT N'Creating [CLO].[Country]...';


GO
CREATE TABLE [CLO].[Country] (
    [CountryId]     SMALLINT      IDENTITY (1, 1) NOT NULL,
    [CountryDesc]   VARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CountryId] ASC)
);


GO
PRINT N'Creating [CLO].[Facility]...';


GO
CREATE TABLE [CLO].[Facility] (
    [FacilityId]    SMALLINT      IDENTITY (1, 1) NOT NULL,
    [FacilityDesc]  VARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([FacilityId] ASC)
);


GO
PRINT N'Creating [CLO].[Issuer]...';


GO
CREATE TABLE [CLO].[Issuer] (
    [IssuerId]      INT           IDENTITY (1, 1) NOT NULL,
    [IssuerDesc]    VARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([IssuerId] ASC)
);


GO
PRINT N'Creating [CLO].[OverrideMarketData]...';


GO
CREATE TABLE [CLO].[OverrideMarketData] (
    [OverrideMarketDataId]          INT              IDENTITY (1, 1) NOT NULL,
    [DateId]                        INT              NOT NULL,
    [SecurityId]                    INT              NOT NULL,
    [Bid]                           NUMERIC (38, 10) NULL,
    [Offer]                         NUMERIC (38, 10) NULL,
    [Spread]                        NUMERIC (38, 10) NULL,
    [LiborFloor]                    NUMERIC (38, 10) NULL,
    [MoodyCashFlowRatingId]         SMALLINT         NOT NULL,
    [MoodyCashFlowRatingAdjustedId] SMALLINT         NOT NULL,
    [MoodyFacilityRatingId]         SMALLINT         NULL,
    [MoodyFacilityRatingAdjustedId] SMALLINT         NULL,
    [MoodyRecovery]                 NUMERIC (18, 4)  NOT NULL,
    [SnPIssuerRatingId]             SMALLINT         NULL,
    [SnPIssuerRatingAdjustedId]     SMALLINT         NULL,
    [SnPFacilityRatingId]           SMALLINT         NULL,
    [SnPfacilityRatingAdjustedId]   SMALLINT         NULL,
    [SnPRecoveryRatingId]           SMALLINT         NULL,
    [MoodyOutlook]                  VARCHAR (1)      NULL,
    [MoodyWatch]                    VARCHAR (1)      NULL,
    [SnPWatch]                      VARCHAR (1)      NULL,
    [NextReportingDate]             DATETIME         NULL,
    [FiscalYearEndDate]             DATETIME         NULL,
    [AgentBank]                     VARCHAR (100)    NULL,
    [CreatedOn]                     DATETIME         NULL,
    [CreatedBy]                     VARCHAR (100)    NULL,
    [LastUpdatedOn]                 DATETIME         NULL,
    [LastUpdatedBy]                 VARCHAR (100)    NULL,
    PRIMARY KEY CLUSTERED ([DateId] DESC, [OverrideMarketDataId] DESC)
);


GO
PRINT N'Creating [CLO].[MarketData]...';


GO
CREATE TABLE [CLO].[MarketData] (
    [MarketDataId]                  BIGINT           IDENTITY (1, 1) NOT NULL,
    [DateId]                        INT              NOT NULL,
    [SecurityId]                    INT              NOT NULL,
    [Bid]                           NUMERIC (38, 10) NOT NULL,
    [Offer]                         NUMERIC (38, 10) NOT NULL,
    [Spread]                        NUMERIC (38, 10) NOT NULL,
    [LiborFloor]                    NUMERIC (38, 10) NOT NULL,
    [MoodyCashFlowRatingId]         SMALLINT         NOT NULL,
    [MoodyCashFlowRatingAdjustedId] SMALLINT         NOT NULL,
    [MoodyFacilityRatingId]         SMALLINT         NULL,
    [MoodyFacilityRatingAdjustedId] SMALLINT         NULL,
    [MoodyRecovery]                 NUMERIC (18, 4)  NOT NULL,
    [SnPIssuerRatingId]             SMALLINT         NULL,
    [SnPIssuerRatingAdjustedId]     SMALLINT         NULL,
    [SnPFacilityRatingId]           SMALLINT         NULL,
    [SnPfacilityRatingAdjustedId]   SMALLINT         NULL,
    [SnPRecoveryRatingId]           SMALLINT         NULL,
    [MoodyOutlook]                  VARCHAR (1)      NOT NULL,
    [MoodyWatch]                    VARCHAR (1)      NOT NULL,
    [SnPWatch]                      VARCHAR (1)      NOT NULL,
    [NextReportingDate]             DATETIME         NULL,
    [FiscalYearEndDate]             DATETIME         NULL,
    [AgentBank]                     VARCHAR (100)    NULL,
    [CreatedOn]                     DATETIME         NULL,
    [CreatedBy]                     VARCHAR (100)    NULL,
    [LastUpdatedOn]                 DATETIME         NULL,
    [LastUpdatedBy]                 VARCHAR (100)    NULL,
    PRIMARY KEY CLUSTERED ([DateId] ASC, [MarketDataId] ASC)
);


GO
PRINT N'Creating [CLO].[AnalystResearch]...';


GO
CREATE TABLE [CLO].[AnalystResearch] (
    [AnalystResearchId] BIGINT          IDENTITY (1, 1) NOT NULL,
    [IssuerId]          INT             NOT NULL,
    [CLOAnalystUserId]  INT             NOT NULL,
    [HFAnalystUserId]   INT             NULL,
    [AsOfDate]          DATETIME        NULL,
    [LiquidityScore]    NUMERIC (10, 4) NULL,
    [OneLLeverage]      NUMERIC (10, 4) NULL,
    [TotalLeverage]     NUMERIC (10, 4) NULL,
    [EVMultiple]        NUMERIC (10, 4) NULL,
    [LTMRevenues]       NUMERIC (38, 4) NULL,
    [LTMEBITDA]         NUMERIC (38, 4) NULL,
    [FCF]               NUMERIC (38, 4) NULL,
    [Comments]          VARCHAR (MAX)   NULL,
    [CreatedOn]         DATETIME        NULL,
    [CreatedBy]         VARCHAR (100)   NULL,
    [LastUpdatedOn]     DATETIME        NULL,
    [LastUpdatedBy]     VARCHAR (100)   NULL,
    PRIMARY KEY CLUSTERED ([AnalystResearchId] ASC)
);


GO
PRINT N'Creating [CLO].[Position]...';


GO
CREATE TABLE [CLO].[Position] (
    [PositionId]    BIGINT          IDENTITY (1, 1) NOT NULL,
    [FundId]        INT             NOT NULL,
    [SecurityId]    INT             NOT NULL,
    [Exposure]      NUMERIC (38, 4) NULL,
    [PctExposure]   NUMERIC (38, 4) NULL,
    [PxPrice]       NUMERIC (38, 4) NULL,
    [CreatedOn]     DATETIME        NULL,
    [CreatedBy]     VARCHAR (100)   NULL,
    [LastUpdatedOn] DATETIME        NULL,
    [LastUpdatedBy] VARCHAR (100)   NULL,
    PRIMARY KEY CLUSTERED ([PositionId] ASC)
);


GO
PRINT N'Creating [CLO].[Security]...';


GO
CREATE TABLE [CLO].[Security] (
    [SecurityId]      INT            IDENTITY (1, 1) NOT NULL,
    [SecurityCode]    VARCHAR (100)  NOT NULL,
    [SecurityDesc]    VARCHAR (500)  NULL,
    [BBGId]           VARCHAR (1000) NOT NULL,
    [IssuerId]        INT            NOT NULL,
    [FacilityId]      SMALLINT       NOT NULL,
    [CallDate]        DATETIME       NULL,
    [CountryId]       SMALLINT       NULL,
    [MaturityDate]    DATETIME       NULL,
    [SnPIndustryId]   SMALLINT       NOT NULL,
    [MoodyIndustryId] SMALLINT       NOT NULL,
    [IsCovLite]       BIT            NOT NULL,
    [IsFloating]      BIT            NOT NULL,
    [LienTypeId]      SMALLINT       NOT NULL,
    [CreditScore]     SMALLINT       NULL,
    [CreatedOn]       DATETIME       NULL,
    [CreatedBy]       VARCHAR (100)  NULL,
    [LastUpdatedOn]   DATETIME       NULL,
    [LastUpdatedBy]   VARCHAR (100)  NULL,
    PRIMARY KEY CLUSTERED ([SecurityId] ASC)
);


GO
PRINT N'Creating [CLO].[Fund]...';


GO
CREATE TABLE [CLO].[Fund] (
    [FundId]        INT           IDENTITY (1, 1) NOT NULL,
    [FundCode]      VARCHAR (100) NOT NULL,
    [FundDesc]      VARCHAR (500) NULL,
    [CreatedOn]     DATETIME      NULL,
    [CreatedBy]     VARCHAR (100) NULL,
    [LastUpdatedOn] DATETIME      NULL,
    [LastUpdatedBy] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([FundId] ASC)
);


GO
PRINT N'Creating [CLO].[SecurityOverride]...';


GO
CREATE TABLE [CLO].[SecurityOverride] (
    [SecurityOverrideId] INT            IDENTITY (1, 1) NOT NULL,
    [SecurityId]         INT            NOT NULL,
    [FieldId]            SMALLINT       NOT NULL,
    [OverrideValue]      VARCHAR (100)  NOT NULL,
    [EffectiveFrom]      DATETIME       NULL,
    [EffectiveTo]        DATETIME       NULL,
    [Comments]           VARCHAR (1000) NULL,
    [IsDeleted]          BIT            NULL,
    PRIMARY KEY CLUSTERED ([SecurityOverrideId] ASC)
);


GO
PRINT N'Creating [CLO].[RuleSectionType]...';


GO
CREATE TABLE [CLO].[RuleSectionType] (
    [RuleSectionTypeId] SMALLINT      IDENTITY (1, 1) NOT NULL,
    [RuleSectionName]   VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([RuleSectionTypeId] ASC)
);


GO
PRINT N'Creating [CLO].[ParameterValue]...';


GO
CREATE TABLE [CLO].[ParameterValue] (
    [Id]                      INT             IDENTITY (1, 1) NOT NULL,
    [ParameterTypeId]         SMALLINT        NOT NULL,
    [ParameterValueNumber]    NUMERIC (28, 4) NULL,
    [ParameterValueText]      NUMERIC (28, 4) NULL,
    [ParameterMinValueNumber] NUMERIC (28, 4) NULL,
    [ParameterMaxValueNumber] NUMERIC (28, 4) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CLO].[ParameterType]...';


GO
CREATE TABLE [CLO].[ParameterType] (
    [ParameterTypeId]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [ParameterTypeName] VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ParameterTypeId] ASC)
);


GO
PRINT N'Creating [CLO].[AlertProcessor]...';


GO
CREATE TABLE [CLO].[AlertProcessor] (
    [AlertId]                 INT           IDENTITY (1, 1) NOT NULL,
    [AlertProcessorClassName] VARCHAR (100) NULL,
    [ParameterTypeId]         SMALLINT      NOT NULL,
    [IsActive]                BIT           NULL,
    PRIMARY KEY CLUSTERED ([AlertId] ASC)
);


GO
PRINT N'Creating [CLO].[Watch]...';


GO
CREATE TABLE [CLO].[Watch] (
    [WatchId]            INT           IDENTITY (1, 1) NOT NULL,
    [WatchObjectTypeId]  SMALLINT      NOT NULL,
    [WatchObjectId]      INT           NOT NULL,
    [WatchComments]      VARCHAR (500) NULL,
    [WatchUser]          VARCHAR (100) NULL,
    [WatchLastUpdatedOn] DATETIME      NULL,
    CONSTRAINT [PK_Watch] PRIMARY KEY CLUSTERED ([WatchId] ASC)
);


GO
PRINT N'Creating [CLO].[Operator]...';


GO
CREATE TABLE [CLO].[Operator] (
    [OperatorId]   SMALLINT     IDENTITY (1, 1) NOT NULL,
    [OperatorCode] VARCHAR (2)  NOT NULL,
    [OperatorVal]  VARCHAR (10) NULL,
    PRIMARY KEY CLUSTERED ([OperatorId] ASC)
);


GO
PRINT N'Creating [CLO].[FundRestriction]...';


GO
CREATE TABLE [CLO].[FundRestriction] (
    [Id]                    INT              IDENTITY (1, 1) NOT NULL,
    [FundId]                INT              NOT NULL,
    [FundRestrictionTypeId] SMALLINT         NOT NULL,
    [FieldId]               SMALLINT         NOT NULL,
    [OperatorId]            SMALLINT         NOT NULL,
    [RestrictionValue]      NUMERIC (38, 10) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [CLO].[Field]...';


GO
ALTER TABLE [CLO].[Field]
    ADD DEFAULT (140) FOR [DisplayWidth];


GO
PRINT N'Creating unnamed constraint on [CLO].[Field]...';


GO
ALTER TABLE [CLO].[Field]
    ADD DEFAULT (0) FOR [IsPercentage];


GO
PRINT N'Creating unnamed constraint on [CLO].[FieldGroup]...';


GO
ALTER TABLE [CLO].[FieldGroup]
    ADD DEFAULT (0) FOR [ShowOnPositions];


GO
PRINT N'Creating unnamed constraint on [CLO].[Calculation]...';


GO
ALTER TABLE [CLO].[Calculation]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Calculation]...';


GO
ALTER TABLE [CLO].[Calculation]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[User]...';


GO
ALTER TABLE [CLO].[User]
    ADD DEFAULT (0) FOR [IsCLOAnalyst];


GO
PRINT N'Creating unnamed constraint on [CLO].[User]...';


GO
ALTER TABLE [CLO].[User]
    ADD DEFAULT (0) FOR [IsHFAnalyst];


GO
PRINT N'Creating unnamed constraint on [CLO].[User]...';


GO
ALTER TABLE [CLO].[User]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[User]...';


GO
ALTER TABLE [CLO].[User]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Rating]...';


GO
ALTER TABLE [CLO].[Rating]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Rating]...';


GO
ALTER TABLE [CLO].[Rating]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[LienType]...';


GO
ALTER TABLE [CLO].[LienType]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[LienType]...';


GO
ALTER TABLE [CLO].[LienType]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Industry]...';


GO
ALTER TABLE [CLO].[Industry]
    ADD DEFAULT (0) FOR [IsSnP];


GO
PRINT N'Creating unnamed constraint on [CLO].[Industry]...';


GO
ALTER TABLE [CLO].[Industry]
    ADD DEFAULT (0) FOR [IsMoody];


GO
PRINT N'Creating unnamed constraint on [CLO].[Industry]...';


GO
ALTER TABLE [CLO].[Industry]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Industry]...';


GO
ALTER TABLE [CLO].[Industry]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Country]...';


GO
ALTER TABLE [CLO].[Country]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Country]...';


GO
ALTER TABLE [CLO].[Country]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Facility]...';


GO
ALTER TABLE [CLO].[Facility]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Facility]...';


GO
ALTER TABLE [CLO].[Facility]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Issuer]...';


GO
ALTER TABLE [CLO].[Issuer]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Issuer]...';


GO
ALTER TABLE [CLO].[Issuer]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData]
    ADD DEFAULT ('0') FOR [MoodyOutlook];


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData]
    ADD DEFAULT ('0') FOR [MoodyWatch];


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData]
    ADD DEFAULT ('0') FOR [SnPWatch];


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[AnalystResearch]...';


GO
ALTER TABLE [CLO].[AnalystResearch]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[AnalystResearch]...';


GO
ALTER TABLE [CLO].[AnalystResearch]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Position]...';


GO
ALTER TABLE [CLO].[Position]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Position]...';


GO
ALTER TABLE [CLO].[Position]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security]
    ADD DEFAULT (0) FOR [IsCovLite];


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security]
    ADD DEFAULT (0) FOR [IsFloating];


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security]
    ADD DEFAULT (0) FOR [CreditScore];


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Fund]...';


GO
ALTER TABLE [CLO].[Fund]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[Fund]...';


GO
ALTER TABLE [CLO].[Fund]
    ADD DEFAULT (getdate()) FOR [LastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[SecurityOverride]...';


GO
ALTER TABLE [CLO].[SecurityOverride]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [CLO].[AlertProcessor]...';


GO
ALTER TABLE [CLO].[AlertProcessor]
    ADD DEFAULT (1) FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [CLO].[Watch]...';


GO
ALTER TABLE [CLO].[Watch]
    ADD DEFAULT (getdate()) FOR [WatchLastUpdatedOn];


GO
PRINT N'Creating unnamed constraint on [CLO].[RuleField]...';


GO
ALTER TABLE [CLO].[RuleField] WITH NOCHECK
    ADD FOREIGN KEY ([RuleId]) REFERENCES [CLO].[Rule] ([RuleId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[RuleField]...';


GO
ALTER TABLE [CLO].[RuleField] WITH NOCHECK
    ADD FOREIGN KEY ([RuleSectionTypeId]) REFERENCES [CLO].[RuleSectionType] ([RuleSectionTypeId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[RuleField]...';


GO
ALTER TABLE [CLO].[RuleField] WITH NOCHECK
    ADD FOREIGN KEY ([FieldId]) REFERENCES [CLO].[Field] ([FieldId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Field]...';


GO
ALTER TABLE [CLO].[Field] WITH NOCHECK
    ADD FOREIGN KEY ([FieldGroupId]) REFERENCES [CLO].[FieldGroup] ([FieldGroupId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Calculation]...';


GO
ALTER TABLE [CLO].[Calculation] WITH NOCHECK
    ADD FOREIGN KEY ([SecurityId]) REFERENCES [CLO].[Security] ([SecurityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SecurityId]) REFERENCES [CLO].[Security] ([SecurityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyCashFlowRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyCashFlowRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyFacilityRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyFacilityRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPIssuerRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPIssuerRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPFacilityRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPfacilityRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[OverrideMarketData]...';


GO
ALTER TABLE [CLO].[OverrideMarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPRecoveryRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SecurityId]) REFERENCES [CLO].[Security] ([SecurityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyCashFlowRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyCashFlowRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyFacilityRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyFacilityRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPIssuerRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPIssuerRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPFacilityRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPfacilityRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[MarketData]...';


GO
ALTER TABLE [CLO].[MarketData] WITH NOCHECK
    ADD FOREIGN KEY ([SnPRecoveryRatingId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[AnalystResearch]...';


GO
ALTER TABLE [CLO].[AnalystResearch] WITH NOCHECK
    ADD FOREIGN KEY ([IssuerId]) REFERENCES [CLO].[Issuer] ([IssuerId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[AnalystResearch]...';


GO
ALTER TABLE [CLO].[AnalystResearch] WITH NOCHECK
    ADD FOREIGN KEY ([CLOAnalystUserId]) REFERENCES [CLO].[User] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[AnalystResearch]...';


GO
ALTER TABLE [CLO].[AnalystResearch] WITH NOCHECK
    ADD FOREIGN KEY ([HFAnalystUserId]) REFERENCES [CLO].[User] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Position]...';


GO
ALTER TABLE [CLO].[Position] WITH NOCHECK
    ADD FOREIGN KEY ([FundId]) REFERENCES [CLO].[Fund] ([FundId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Position]...';


GO
ALTER TABLE [CLO].[Position] WITH NOCHECK
    ADD FOREIGN KEY ([SecurityId]) REFERENCES [CLO].[Security] ([SecurityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([IssuerId]) REFERENCES [CLO].[Issuer] ([IssuerId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([FacilityId]) REFERENCES [CLO].[Facility] ([FacilityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([CountryId]) REFERENCES [CLO].[Country] ([CountryId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([SnPIndustryId]) REFERENCES [CLO].[Industry] ([IndustryId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyIndustryId]) REFERENCES [CLO].[Industry] ([IndustryId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[Security]...';


GO
ALTER TABLE [CLO].[Security] WITH NOCHECK
    ADD FOREIGN KEY ([LienTypeId]) REFERENCES [CLO].[LienType] ([LienTypeId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[SecurityOverride]...';


GO
ALTER TABLE [CLO].[SecurityOverride] WITH NOCHECK
    ADD FOREIGN KEY ([SecurityId]) REFERENCES [CLO].[Security] ([SecurityId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[SecurityOverride]...';


GO
ALTER TABLE [CLO].[SecurityOverride] WITH NOCHECK
    ADD FOREIGN KEY ([FieldId]) REFERENCES [CLO].[Field] ([FieldId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[ParameterValue]...';


GO
ALTER TABLE [CLO].[ParameterValue] WITH NOCHECK
    ADD FOREIGN KEY ([ParameterTypeId]) REFERENCES [CLO].[ParameterType] ([ParameterTypeId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[AlertProcessor]...';


GO
ALTER TABLE [CLO].[AlertProcessor] WITH NOCHECK
    ADD FOREIGN KEY ([ParameterTypeId]) REFERENCES [CLO].[ParameterType] ([ParameterTypeId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[FundRestriction]...';


GO
ALTER TABLE [CLO].[FundRestriction] WITH NOCHECK
    ADD FOREIGN KEY ([FundId]) REFERENCES [CLO].[Fund] ([FundId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[FundRestriction]...';


GO
ALTER TABLE [CLO].[FundRestriction] WITH NOCHECK
    ADD FOREIGN KEY ([FundRestrictionTypeId]) REFERENCES [CLO].[FundRestrictionType] ([FundRestrictionTypeId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[FundRestriction]...';


GO
ALTER TABLE [CLO].[FundRestriction] WITH NOCHECK
    ADD FOREIGN KEY ([FieldId]) REFERENCES [CLO].[Field] ([FieldId]);


GO
PRINT N'Creating unnamed constraint on [CLO].[FundRestriction]...';


GO
ALTER TABLE [CLO].[FundRestriction] WITH NOCHECK
    ADD FOREIGN KEY ([OperatorId]) REFERENCES [CLO].[Operator] ([OperatorId]);


GO
PRINT N'Creating [CLO].[fn_GetDiversities]...';


GO
CREATE FUNCTION [CLO].[fn_GetDiversities]()

RETURNS @fundDiversities TABLE
(
	FundId int,
	Diversity numeric(38,10)
)
AS
BEGIN
declare @ExposureBy_Issuer_MoodyIndustry_Portfolio table (
       FundCode VARCHAR(100), 
       FundId INT,
       IssuerDesc VARCHAR(1000),
       IssuerId INT, 
       IndustryDesc VARCHAR(1000),
       MoodyIndustryId INT, 
       Exposure NUMERIC(28,2),
       DiversityUnit NUMERIC(28,8), 
       Diveristy NUMERIC(28,8)
)

DECLARE @AVG_Fund_Exposure TABLE (FundId VARCHAR(100), AvgExposure NUMERIC(38,10))

INSERT INTO @ExposureBy_Issuer_MoodyIndustry_Portfolio
SELECT f.FundCode , f.FundId, iss.IssuerDesc,s.IssuerId, i.IndustryDesc,
s.MoodyIndustryId, SUM(ISNULL(P.Exposure,0)) Exposure  ,
NULL AS DiversityUnit, NULL AS Diveristy
FROM CLO.Position P WITH(NOLOCK) 
JOIN CLO.Security s WITH(NOLOCK) ON s.SecurityId = p.SecurityId
JOIN clo.Industry i WITH(NOLOCK) ON i.IndustryId = s.MoodyIndustryId
JOIN CLO.Issuer iss WITH(NOLOCK) ON iss.IssuerId =s.IssuerId
JOIN CLO.Fund f WITH(NOLOCK)  on f.fundid = p.FundId
GROUP BY s.IssuerId,iss.IssuerDesc, s.MoodyIndustryId,i.IndustryDesc,f.FundCode,f.FundId
ORDER by iss.IssuerDesc,i.IndustryDesc,f.FundCode

INSERT INTO @AVG_Fund_Exposure
        ( FundId, AvgExposure )
SELECT FundId, AVG(Exposure) AvgExposure
FROM @ExposureBy_Issuer_MoodyIndustry_Portfolio
WHERE Exposure <> 0
GROUP BY FundId


UPDATE @ExposureBy_Issuer_MoodyIndustry_Portfolio
SET DiversityUnit = CASE WHEN AvgExposure = 0.0000 THEN 0.0000 ELSE (Exposure/AvgExposure) END 
FROM @AVG_Fund_Exposure i WHERE i.FundId = [@ExposureBy_Issuer_MoodyIndustry_Portfolio].FundId


UPDATE @ExposureBy_Issuer_MoodyIndustry_Portfolio
SET DiversityUnit = 1.0000 
WHERE DiversityUnit > 1.0

declare @Diverisity TABLE (FundId int, MoodyIndustryId INT, IndustryDesc VARCHAR(1000),
TotalDiversityUnit NUMERIC(28,2), DiversityValue NUMERIC(38,2))

INSERT INTO @Diverisity
SELECT FundId, MoodyIndustryId, MAX(IndustryDesc) IndustryDesc,  
SUM(DiversityUnit) TotalDiversityUnit, NULL AS DiversityValue 
FROM @ExposureBy_Issuer_MoodyIndustry_Portfolio
GROUP BY MoodyIndustryId, FundId 

UPDATE @Diverisity
SET DiversityValue = CASE 
WHEN TotalDiversityUnit <=1 THEN ((((TotalDiversityUnit/0.1)+0.5)/10)+0)
WHEN TotalDiversityUnit > 1 AND TotalDiversityUnit <= 3 THEN ((((TotalDiversityUnit/0.1)-9.5)/20) + 1)
WHEN TotalDiversityUnit > 3 AND TotalDiversityUnit <= 6 THEN ((((TotalDiversityUnit/0.1)-29.5)/30) + 2)
WHEN TotalDiversityUnit > 6 AND TotalDiversityUnit <= 10 THEN ((((TotalDiversityUnit/0.1)-59.5)/40) + 3)
WHEN TotalDiversityUnit > 10 THEN ((((TotalDiversityUnit/0.1)-99.5)/100) + 4)
end



INSERT @fundDiversities
SELECT FundId, SUM(DiversityValue) as Diversity FROM @Diverisity GROUP BY FundId
RETURN
END
GO
PRINT N'Creating [CLO].[vw_MarketData]...';


GO
CREATE VIEW [CLO].[vw_MarketData]
	AS SELECT 
	   m.[DateId]
      ,m.MarketDataId MarketDataId
	  ,o.OverrideMarketDataId OverrideMarketDataId
      ,m.[SecurityId]
      ,ISNULL(o.[Bid]							,m.[Bid]							) as [Bid]
      ,ISNULL(o.[Offer]							,m.[Offer]							) as [Offer]
      ,ISNULL(o.[Spread]						,m.[Spread]							) as [Spread]
      ,ISNULL(o.[LiborFloor]					,m.[LiborFloor]						) as [LiborFloor]
      ,moodycashflowrating.RatingDesc as [MoodyCashFlowRating]
      ,moodycashflowratingadjusted.RatingDesc as [MoodyCashFlowRatingAdjusted]
      ,moodyfacilityrating.RatingDesc as [MoodyFacilityRating]
      ,moodyfacilityratingadjusted.RatingDesc as [MoodyFacilityRatingAdjusted]
      ,ISNULL(o.[MoodyRecovery]					,m.[MoodyRecovery]					) as [MoodyRecovery]
      ,snpissuerrating.RatingDesc as [SnPIssuerRating]
      ,snpissuerratingadjusted.RatingDesc as [SnPIssuerRatingAdjusted]
      ,snpfacilityrating.RatingDesc as [SnPFacilityRating]
      ,snpfacilityratingadjusted.RatingDesc as [SnPfacilityRatingAdjusted]
      ,snprecoveryrating.RatingDesc as [SnPRecoveryRating]
      ,ISNULL(o.[MoodyOutlook]					,m.[MoodyOutlook]					) as [MoodyOutlook]
      ,ISNULL(o.[MoodyWatch]					,m.[MoodyWatch]						) as [MoodyWatch]
      ,ISNULL(o.[SnPWatch]						,m.[SnPWatch]						) as [SnPWatch]
      ,ISNULL(o.[NextReportingDate]				,m.[NextReportingDate]				) as [NextReportingDate]
      ,ISNULL(o.[FiscalYearEndDate]				,m.[FiscalYearEndDate]				) as [FiscalYearEndDate]
      ,ISNULL(o.[AgentBank]				,m.[AgentBank]				) as [AgentBank]

	FROM CLO.MarketData m with(nolock)
	left join CLO.OverrideMarketData o with(nolock) on m.DateId = o.DateId and m.SecurityId = o.SecurityId
	left join CLO.Rating moodycashflowrating  with(nolock)  on moodycashflowrating.RatingId = ISNULL(o.[MoodyCashFlowRatingId],m.[MoodyCashFlowRatingId]) 
	left join CLO.Rating moodycashflowratingadjusted  with(nolock)  on moodycashflowratingadjusted.RatingId = ISNULL(o.[MoodyCashFlowRatingAdjustedId],m.[MoodyCashFlowRatingAdjustedId]) 
	left join CLO.Rating moodyfacilityrating  with(nolock)  on moodyfacilityrating.RatingId = ISNULL(o.[MoodyFacilityRatingId],m.[MoodyFacilityRatingId]) 
	left join CLO.Rating moodyfacilityratingadjusted  with(nolock)  on moodyfacilityratingadjusted.RatingId = ISNULL(o.[MoodyFacilityRatingAdjustedId],m.[MoodyFacilityRatingAdjustedId])
	left join CLO.Rating snpissuerrating  with(nolock)  on snpissuerrating.RatingId = ISNULL(o.[SnPIssuerRatingId],m.[SnPIssuerRatingId])
	left join CLO.Rating snpissuerratingadjusted  with(nolock)  on snpissuerratingadjusted.RatingId = ISNULL(o.[SnPIssuerRatingAdjustedId],m.[SnPIssuerRatingAdjustedId])
	left join CLO.Rating snpfacilityrating  with(nolock)  on snpfacilityrating.RatingId = ISNULL(o.[SnPFacilityRatingId],m.[SnPFacilityRatingId])
	left join CLO.Rating snpfacilityratingadjusted  with(nolock)  on snpfacilityratingadjusted.RatingId = ISNULL(o.[SnPfacilityRatingAdjustedId],m.[SnPfacilityRatingAdjustedId])
	left join CLO.Rating snprecoveryrating  with(nolock)  on snprecoveryrating.RatingId = ISNULL(o.[SnPRecoveryRatingId],m.[SnPRecoveryRatingId])
GO
PRINT N'Creating [CLO].[vw_CLOSummary]...';


GO
CREATE VIEW [CLO].[vw_CLOSummary]
	AS 
	with marketdata_cfe 
	as (
	select 
	* ,
	ROW_NUMBER() OVER 
    ( 
         PARTITION BY SecurityId,DateId  
         ORDER BY DateId DESC 
    ) AS ROWNUM 
	
	from
		CLO.vw_MarketData with(nolock) 
	)
	
	SELECT 
	f.FundCode,
	SUM(p.Exposure) Par,
	SUM(m.Spread * p.Exposure)/SUM(p.Exposure) Spread,
	SUM(c.TotalCoupon * p.Exposure)/SUM(p.Exposure) TotalCoupon,
	SUM(c.WARF * p.Exposure)/SUM(p.Exposure)  WARF,
	SUM(m.MoodyRecovery * p.Exposure)/SUM(p.Exposure)  MoodyRecovery,
	SUM(m.Bid * p.Exposure)/SUM(p.Exposure)  Bid,
	NULL  PrincipalCash,
	f.FundId,
	MAX(d.Diversity) Diversity 

	FROM CLO.Position p with(nolock)
	join CLO.Fund f  with(nolock) on p.FundId = f.FundId
	left join CLO.Calculation c  with(nolock) on p.SecurityId = c.SecurityId
	left join marketdata_cfe m with(nolock) on p.SecurityId = m.SecurityId and m.ROWNUM = 1
	left join CLO.fn_GetDiversities() d on d.FundId = f.FundId

	GROUP BY f.FundCode,f.FundId
GO
PRINT N'Creating [CLO].[vw_CurrentAnalystResearch]...';


GO
CREATE VIEW [CLO].[vw_CurrentAnalystResearch]
	AS 
	
	WITH    analystrefresh_cfe
              AS ( SELECT   * ,
                            ROW_NUMBER() OVER ( PARTITION BY IssuerId 
							ORDER BY AsOfDate DESC ) AS ROWNUM
                   FROM     CLO.AnalystResearch WITH ( NOLOCK )
				   where AsOfDate is null or AsOfDate <= CONVERT(date, getdate())
                 )
	
	SELECT 
	
	[AnalystResearchId], 
	a.[IssuerId],
	a.CLOAnalystUserId,
	a.HFAnalystUserId,
	[cloanalyst].[FullName] CLOAnalyst,
	[hfanalyst].[FullName] HFAnalyst,
	[AsOfDate],
	[LiquidityScore],
	[OneLLeverage],
	[TotalLeverage],
	[EVMultiple],
	[LTMRevenues],
	[LTMEBITDA],
	[FCF],
	[Comments],
	issuer.IssuerDesc

	FROM analystrefresh_cfe a  with(nolock)

	left join CLO.[User] cloanalyst with(nolock)   on cloanalyst.UserId = a.CLOAnalystUserId
	left join CLO.[User] hfanalyst with(nolock)   on hfanalyst.UserId = a.HFAnalystUserId
	join CLO.Issuer issuer with(nolock) on a.IssuerId = issuer.IssuerId

	where ROWNUM = 1
GO
PRINT N'Creating [CLO].[vw_CurrentActiveSecurityOverrides]...';


GO
CREATE VIEW [CLO].[vw_CurrentActiveSecurityOverrides]
	AS 		
	SELECT SecurityId,OverrideValue,FieldName
		from [CLO].SecurityOverride so  with (nolock)
		join [CLO].Field f with(nolock) on so.FieldId = f.FieldId
		where	(so.IsDeleted IS NULL OR so.IsDeleted =0)
		AND	(so.EffectiveFrom IS NULL OR so.EffectiveFrom <= CONVERT(date, getdate()))
		AND (so.EffectiveTo IS NULL OR so.EffectiveTo > CONVERT(date, getdate()))
GO
PRINT N'Creating [CLO].[vw_Calculations]...';


GO
CREATE VIEW [CLO].[vw_Calculations]
	AS SELECT [CalculationId]
      ,[SecurityId]
      ,[YieldBid]
      ,[YieldOffer]
      ,[YieldMid]
      ,[CappedYieldBid]
      ,[CappedYieldOffer]
      ,[CappedYieldMid]
      ,[TargetYieldBid]
      ,[TargetYieldOffer]
      ,[TargetYieldMid]
      ,[BetterWorseBid]
      ,[BetterWorseOffer]
      ,[BetterWorseMid]
      ,[TotalCoupon]
      ,[WARF]
      ,[WARFRecovery]
      ,[Life]
      ,[TotalPar]
      ,[CreatedOn]
      ,[CreatedBy]
      ,[LastUpdatedOn]
      ,[LastUpdatedBy]
  FROM [CLO].[Calculation] with(nolock)
GO
PRINT N'Creating [CLO].[vw_AnalystResearch]...';


GO
CREATE VIEW [CLO].[vw_AnalystResearch]
	AS 
	
	WITH    analystrefresh_cfe
              AS ( SELECT   * ,
                            ROW_NUMBER() OVER ( PARTITION BY IssuerId
							ORDER BY AsOfDate DESC ) AS ROWNUM
                   FROM     CLO.AnalystResearch WITH ( NOLOCK )
                 )
	
	SELECT 
	
	[AnalystResearchId], 
	a.[IssuerId],
	a.CLOAnalystUserId,
	a.HFAnalystUserId,
	[cloanalyst].[FullName] CLOAnalyst,
	[hfanalyst].[FullName] HFAnalyst,
	[AsOfDate],
	[LiquidityScore],
	[OneLLeverage],
	[TotalLeverage],
	[EVMultiple],
	[LTMRevenues],
	[LTMEBITDA],
	[FCF],
	[Comments],
	issuer.IssuerDesc

	FROM analystrefresh_cfe a  with(nolock)

	left join CLO.[User] cloanalyst with(nolock)   on cloanalyst.UserId = a.CLOAnalystUserId
	left join CLO.[User] hfanalyst with(nolock)   on hfanalyst.UserId = a.HFAnalystUserId
	join CLO.Issuer issuer with(nolock) on a.IssuerId = issuer.IssuerId

	where ROWNUM = 1 or AsOfDate >= CONVERT(date, getdate())
GO
PRINT N'Creating [CLO].[vw_Security]...';


GO
CREATE VIEW [CLO].[vw_Security]
	AS 

	with  PivotedSecurityOverrides_cfe as (
		select *
		from [CLO].[vw_CurrentActiveSecurityOverrides]
		pivot (max(OverrideValue) for FieldName in (
		[SecurityCode]
		,[SecurityDesc]
		,[BBGId]
		,[Issuer]
		,[Facility]
		,[CallDate]
		,[CountryDesc]
		,[MaturityDate]
		,[SnpIndustry]
		,[MoodyIndustry]
		,[IsCovLite]
		,[IsFloating]
		,[LienType]
		,[CreditScore]
		)) as AvgIncomePerDay)

	SELECT 
	s.SecurityId,
	ISNULL(os.SecurityCode, s.SecurityCode) SecurityCode,
	ISNULL(os.SecurityDesc, s.SecurityDesc) SecurityDesc,
	ISNULL(os.BBGId, s.BBGId) BBGId,
	ISNULL(os.Issuer, i.IssuerDesc) Issuer,
	ISNULL(os.[Facility], f.FacilityDesc) Facility,
	ISNULL(cast(os.CallDate as date), s.CallDate) CallDate,
	ISNULL(os.CountryDesc, c.CountryDesc) CountryDesc,
	ISNULL(cast(os.[MaturityDate] as date), s.MaturityDate) MaturityDate,
	ISNULL(os.SnpIndustry,snpindustry.IndustryDesc) SnpIndustry,
	ISNULL(os.MoodyIndustry, moodyindustry.IndustryDesc) MoodyIndustry,
	ISNULL(cast(case when os.[IsCovLite] = 'Y' then 1 when os.[IsCovLite] = 'N' then 0  end as bit), s.IsCovLite) IsCovLite,
	ISNULL(cast(case when os.IsFloating  = 'Fixed' then 0 when os.IsFloating  = 'Floating' then 1 end as bit), s.IsFloating) IsFloating,
	ISNULL(os.LienType, lientype.LienTypeDesc) LienType,
	ISNULL(cast(os.CreditScore as smallint), s.CreditScore) CreditScore,
	s.IssuerId,
	w.WatchId,
	cast (case when w.WatchId is null  then 0 else 1 end as bit) IsOnWatch,
	w.WatchObjectTypeId,
	w.WatchObjectId,
	w.WatchComments,
	FORMAT(w.WatchLastUpdatedOn, 'MM/dd/yyyy hh:mm tt') WatchLastUpdatedOn,
	w.WatchUser,

	s.SecurityCode OrigSecurityCode,
	s.SecurityDesc OrigSecurityDesc,
	s.BBGId OrigBBGId,
	i.IssuerDesc OrigIssuer,
	f.FacilityDesc OrigFacility,
	s.CallDate OrigCallDate,
	c.CountryDesc OrigCountryDesc,
	s.MaturityDate OrigMaturityDate,
	snpindustry.IndustryDesc OrigSnpIndustry,
	moodyindustry.IndustryDesc OrigMoodyIndustry,
	s.IsCovLite OrigIsCovLite,
	s.IsFloating OrigIsFloating,
	lientype.LienTypeDesc OrigLienType,
	s.CreditScore OrigCreditScore

	FROM CLO.Security  s with(nolock) 
	LEFT JOIN CLO.Issuer i with (nolock)  on i.IssuerId = s.IssuerId
	LEFT JOIN CLO.Facility f with(nolock) on f.FacilityId = s.FacilityId
	LEFT JOIN CLO.Country c   with(nolock) on c.CountryId = s.CountryId
	LEFT JOIN CLO.Industry snpindustry    with(nolock) on snpindustry.IndustryId = s.SnPIndustryId and snpindustry.IsSnP = 1
	LEFT JOIN CLO.Industry moodyindustry    with(nolock) on moodyindustry.IndustryId = s.MoodyIndustryId and moodyindustry.IsMoody = 1
	LEFT JOIN CLO.LienType lientype with(nolock) on lientype.LienTypeId = s.LienTypeId 
	LEFT JOIN [CLO].[Watch] w on  (w.WatchObjectTypeId = 1 and w.WatchObjectId= s.SecurityId) or (w.WatchObjectId = s.IssuerId and w.WatchObjectTypeId=2)
	LEFT JOIN PivotedSecurityOverrides_cfe os on os.SecurityId = s.SecurityId
GO
PRINT N'Creating [CLO].[vw_Position]...';


GO
CREATE VIEW [CLO].[vw_Position]
AS
    WITH    marketdata_cfe
              AS ( SELECT   * ,
                            ROW_NUMBER() OVER ( PARTITION BY SecurityId,
                                                DateId ORDER BY DateId DESC ) AS ROWNUM
                   FROM     CLO.vw_MarketData WITH ( NOLOCK )
                 )
    SELECT 
		   p.[PositionId] 
		  ,FORMAT(p.[Exposure] , '#,###') [Exposure]
		  ,FORMAT(p.[PctExposure]/100, 'p')  [PctExposure]  
          ,p.[PxPrice] 
		  ,p.[PctExposure] PctExposureNum
		  ,f.FundCode
		  ,s.SecurityId
		  ,s.[SecurityCode]
		  ,s.[SecurityDesc]
		  ,s.[BBGId]
		  ,s.[Issuer]
		  ,s.[IssuerId]
		  ,LTRIM(s.[Facility]) [Facility]
		  ,CONVERT(VARCHAR(10), s.[CallDate], 101) [CallDate]
		  ,s.[CountryDesc]
		  ,CONVERT(VARCHAR(10), s.[MaturityDate], 101) [MaturityDate]
		  ,s.[SnpIndustry]
		  ,s.[MoodyIndustry]
		  ,case when (s.[IsCovLite] =1 ) then 'Y' else 'N' end [IsCovLite]
		  ,case when (s.[IsFloating] = 1) then 'Floating' else 'Fixed' end [IsFloating]
		  ,s.[LienType]
		  ,s.CreditScore
		  ,s.[IsOnWatch]
		  ,s.WatchObjectTypeId
		  ,s.WatchObjectId
		  ,s.[WatchId]
		  ,s.[WatchComments]
		  ,s.WatchLastUpdatedOn
		  ,s.WatchUser
		  
		  
		  ,s.[OrigSecurityCode]
		  ,s.[OrigSecurityDesc]
		  ,s.[OrigBBGId]
		  ,s.[OrigIssuer]
		  ,LTRIM(s.[OrigFacility]) [OrigFacility]
		  ,CONVERT(VARCHAR(10), s.[OrigCallDate], 101) [OrigCallDate]
		  ,s.[OrigCountryDesc]
		  ,CONVERT(VARCHAR(10), s.[OrigMaturityDate], 101) [OrigMaturityDate]
		  ,s.[OrigSnpIndustry]
		  ,s.[OrigMoodyIndustry]
		  ,case when (s.[OrigIsCovLite] =1 ) then 'Y' else 'N' end [OrigIsCovLite]
		  ,case when (s.[OrigIsFloating] = 1) then 'Floating' else 'Fixed' end [OrigIsFloating]
		  ,s.[OrigLienType]
		  ,s.[OrigCreditScore]


		  ,m.[DateId]
		  ,m.[MarketDataId]
		  ,m.[OverrideMarketDataId]
		  ,CONVERT(varchar, CAST(m.[Bid] AS money), 1) [Bid]
		  ,CONVERT(varchar, CAST(m.[Offer] AS money), 1) [Offer]
		  ,m.[Spread]
		  ,m.[LiborFloor]
		  ,m.[MoodyCashFlowRating]
		  ,m.[MoodyCashFlowRatingAdjusted]
		  ,m.[MoodyFacilityRating]
		  ,m.[MoodyFacilityRatingAdjusted]
		  ,m.[MoodyRecovery]
		  ,m.[SnPIssuerRating]
		  ,m.[SnPIssuerRatingAdjusted]
		  ,m.[SnPFacilityRating]
		  ,m.[SnPfacilityRatingAdjusted]
		  ,m.[SnPRecoveryRating]
		  ,m.[MoodyOutlook]
		  ,m.[MoodyWatch]
		  ,m.[SnPWatch]
		  ,CONVERT(VARCHAR(10), m.[NextReportingDate], 101) [NextReportingDate]
		  ,CONVERT(VARCHAR(10), m.[FiscalYearEndDate], 101) [FiscalYearEndDate]
		  ,m.[AgentBank] 
		  ,c.[CalculationId]
		  ,c.[YieldBid]
		  ,c.[YieldOffer]
		  ,c.[YieldMid]
		  ,c.[CappedYieldBid]
		  ,c.[CappedYieldOffer]
		  ,c.[CappedYieldMid]
		  ,c.[TargetYieldBid]
		  ,c.[TargetYieldOffer]
		  ,c.[TargetYieldMid]
		  ,c.[BetterWorseBid]
		  ,c.[BetterWorseOffer]
		  ,c.[BetterWorseMid]
		  ,c.[TotalCoupon]
		  ,c.[WARF]
		  ,c.[WARFRecovery]
		  ,c.[Life]
		  , FORMAT(c.[TotalPar] , '#,###') [TotalPar]

		  ,[a].AnalystResearchId
		  ,[a].[CLOAnalyst]
		  ,[a].[HFAnalyst]
		  ,CONVERT(VARCHAR(10), [a].[AsOfDate], 101) [AsOfDate]
		  ,[a].[LiquidityScore]
		  ,[a].[OneLLeverage]
		  ,CONVERT(varchar, CAST([a].[TotalLeverage] AS money), 1) [TotalLeverage]
		  ,CONVERT(varchar, CAST([a].[EVMultiple] AS money), 1) [EVMultiple]
		  ,CONVERT(varchar, CAST([a].[LTMRevenues] AS money), 1) [LTMRevenues]
		  ,CONVERT(varchar, CAST([a].[LTMEBITDA] AS money), 1) [LTMEBITDA]
		  ,CONVERT(varchar, CAST([a].[FCF] AS money), 1) [FCF]
		  ,[a].[Comments]            

		  ,Cast(0 as bit) as IsOnAlert
		  ,NULL As SearchText

    FROM  CLO.Position p WITH ( NOLOCK )
          JOIN CLO.Fund f WITH ( NOLOCK ) ON p.FundId = f.FundId
          JOIN [CLO].vw_Security s WITH ( NOLOCK ) ON s.SecurityId = p.SecurityId
          LEFT JOIN [CLO].vw_CurrentAnalystResearch a WITH ( NOLOCK ) ON a.IssuerId = s.IssuerId
          LEFT JOIN [CLO].vw_Calculations c WITH ( NOLOCK ) ON p.SecurityId = c.SecurityId
          LEFT JOIN marketdata_cfe m WITH (NOLOCK) ON p.SecurityId = m.SecurityId AND m.ROWNUM = 1
GO
PRINT N'Creating [CLO].[spGetCreditScoreAlertIssuers]...';


GO
CREATE PROCEDURE [CLO].[spGetCreditScoreAlertIssuers]
	@paramFundCode varchar(100)
AS

select IssuerId,MAX(p.CreditScore) CreditScore,SUM(ISNULL(p.PctExposureNum,0)) PCTExposure 
into #CheckForCrediScoreAlerts
from CLO.vw_Position p with(nolock)
where p.FundCode = @paramFundCode
group by IssuerId

select 
IssuerId
from #CheckForCrediScoreAlerts a
join CLO.ParameterValue pv with(nolock) on pv.ParameterValueNumber = a.CreditScore
join CLO.ParameterType pt with(nolock) on pt.ParameterTypeId = pv.ParameterTypeId and pt.ParameterTypeName = 'Credit Score'
where (pv.ParameterMinValueNumber is not null and PCTExposure < pv.ParameterMinValueNumber) or 
(pv.ParameterMaxValueNumber is not null and PCTExposure > pv.ParameterMaxValueNumber)

drop table #CheckForCrediScoreAlerts

RETURN 0
GO
PRINT N'Creating [CLO].[spPositionSizeByCreditScoreByTotalCouponRuleProcessor]...';


GO
CREATE PROCEDURE [CLO].[spPositionSizeByCreditScoreByTotalCouponRuleProcessor]
	@ruleSectionName varchar(100),
	@fundCode varchar(100)
AS


select IssuerId,MAX(p.CreditScore) CreditScore,SUM(ISNULL(p.PctExposureNum,0)) PCTExposure 
into #CheckForCrediScoreAlerts
from CLO.vw_Position p with(nolock)
where p.FundCode = @fundCode
group by IssuerId


	
select top 10
p.*,
(case when @ruleSectionName = 'Top' then (pv.ParameterMinValueNumber - a.[PCTExposure]) 
     else (a.[PCTExposure] - pv.ParameterMaxValueNumber) end) 
Delta,
ROW_NUMBER () Over (order by 
case when @ruleSectionName = 'Top' then p.TotalCoupon end desc,
case when @ruleSectionName = 'Bottom' then p.TotalCoupon end asc) RowNum

from clo.vw_Position p with(nolock)
join #CheckForCrediScoreAlerts a on a.IssuerId  = p.IssuerId
join clo.ParameterValue pv with (nolock) on ISNULL(p.CreditScore,0) = cast(pv.ParameterValueNumber as smallint)
join clo.ParameterType pt with(nolock) on pv.ParameterTypeId = pt.ParameterTypeId and pt.ParameterTypeName = 'Credit Score'

where p.CreditScore <> 0 and p.FundCode = @fundCode

order by Delta desc, RowNum

drop table #CheckForCrediScoreAlerts

RETURN 0
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'CLO.RuleField'), OBJECT_ID(N'CLO.Field'), OBJECT_ID(N'CLO.Calculation'), OBJECT_ID(N'CLO.OverrideMarketData'), OBJECT_ID(N'CLO.MarketData'), OBJECT_ID(N'CLO.AnalystResearch'), OBJECT_ID(N'CLO.Position'), OBJECT_ID(N'CLO.Security'), OBJECT_ID(N'CLO.SecurityOverride'), OBJECT_ID(N'CLO.ParameterValue'), OBJECT_ID(N'CLO.AlertProcessor'), OBJECT_ID(N'CLO.FundRestriction'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO

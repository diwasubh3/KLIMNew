/*
Deployment script for Yoda

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar YorkCore_Geneva "YorkCore_Geneva"
:setvar DatabaseName "Yoda"
:setvar DefaultFilePrefix "Yoda"
:setvar DefaultDataPath "E:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "F:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO

PRINT N'Removing schema binding from [CLO].[vw_Calculation]...';


GO
ALTER VIEW [CLO].[vw_Calculation]
AS
SELECT CalculationId,
       DateId,
       SecurityId,
       FundId,
       YieldBid,
       YieldOffer,
       YieldMid,
       CappedYieldBid,
       CappedYieldOffer,
       CappedYieldMid,
       TargetYieldBid,
       TargetYieldOffer,
       TargetYieldMid,
       BetterWorseBid,
       BetterWorseOffer,
       BetterWorseMid,
       TotalCoupon,
       WARF,
       WARFRecovery,
       Life,
       TotalPar,
       moodyfacilityratingadjusted.RatingDesc AS MoodyFacilityRatingAdjusted,
       c.CreatedOn,
       c.CreatedBy,
       c.LastUpdatedOn,
       c.LastUpdatedBy,
       c.MatrixImpliedSpread,
       c.MatrixWARFRecovery,
       c.zSnPAssetRecoveryRating,
       c.SnpWarf,
       c.SnpLgd,
       c.MoodysLgd,
       c.YieldAvgLgd,
       c.SnpAAARecovery,
       c.SnPIssuerRatingAdjusted,
       ROW_NUMBER() OVER (PARTITION BY SecurityId, FundId ORDER BY DateId DESC) AS RowNumber
FROM   CLO.Calculation AS c WITH (NOLOCK)
       LEFT OUTER JOIN
       CLO.Rating AS moodyfacilityratingadjusted WITH (NOLOCK)
       ON moodyfacilityratingadjusted.RatingId = c.MoodyFacilityRatingAdjustedId
WHERE  DateId = CLO.GetPrevDayDateId();


GO
PRINT N'Altering [CLO].[Calculation]...';


GO
ALTER TABLE [CLO].[Calculation]
    ADD [MoodyCashFlowRatingAdjustedId] SMALLINT NOT NULL;


GO
PRINT N'Creating unnamed constraint on [CLO].[Calculation]...';


GO
ALTER TABLE [CLO].[Calculation] WITH NOCHECK
    ADD FOREIGN KEY ([MoodyCashFlowRatingAdjustedId]) REFERENCES [CLO].[Rating] ([RatingId]);


GO
PRINT N'Adding schema binding to [CLO].[vw_Calculation]...';


GO
ALTER VIEW [CLO].[vw_Calculation] WITH SCHEMABINDING 
	AS 
	SELECT 
	  CalculationId
	, DateId
	, SecurityId
	, FundId
	, YieldBid
	, YieldOffer
	, YieldMid
	, CappedYieldBid
	, CappedYieldOffer
	, CappedYieldMid
	, TargetYieldBid
	, TargetYieldOffer
	, TargetYieldMid
	, BetterWorseBid
	, BetterWorseOffer
	, BetterWorseMid
	, TotalCoupon
	, WARF
	, WARFRecovery
	, Life
	, TotalPar
	, moodyfacilityratingadjusted.RatingDesc AS MoodyFacilityRatingAdjusted
	, c.CreatedOn
	, c.CreatedBy
	, c.LastUpdatedOn
	, c.LastUpdatedBy
	, c.MatrixImpliedSpread
	, c.MatrixWARFRecovery
	, c.zSnPAssetRecoveryRating
	, c.SnpWarf
	, c.SnpLgd
	, c.MoodysLgd
	, c.YieldAvgLgd
	, c.SnpAAARecovery
	, c.SnPIssuerRatingAdjusted
	,moodycashflowratingadjusted.RatingDesc AS MoodyCashFlowRatingAdjusted
	, ROW_NUMBER() OVER (PARTITION BY SecurityId, FundId
			ORDER BY DateId DESC) AS RowNumber
	FROM CLO.Calculation c (NOLOCK)
	LEFT JOIN CLO.Rating moodyfacilityratingadjusted (NOLOCK) ON moodyfacilityratingadjusted.RatingId = c.MoodyFacilityRatingAdjustedId
	LEFT JOIN CLO.Rating moodycashflowratingadjusted (NOLOCK) ON moodycashflowratingadjusted.RatingId = c.[MoodyCashFlowRatingAdjustedId]
	WHERE DateId = CLO.GetPrevDayDateId()
GO
PRINT N'Altering [CLO].[vw_CalculationSecurity]...';


GO
ALTER VIEW CLO.vw_CalculationSecurity
AS
	SELECT	CalculationId, DateId, SecurityId, YieldBid, YieldOffer, YieldMid
		, CappedYieldBid, CappedYieldOffer, CappedYieldMid, TargetYieldBid, TargetYieldOffer
		, TargetYieldMid, BetterWorseBid, BetterWorseOffer, BetterWorseMid, TotalCoupon, WARF
		, WARFRecovery, Life, TotalPar, moodyfacilityratingadjusted.RatingDesc AS MoodyFacilityRatingAdjusted
		, c.CreatedOn, c.CreatedBy, c.LastUpdatedOn, c.LastUpdatedBy,
		moodycashflowratingadjusted.RatingDesc AS MoodyCashFlowRatingAdjusted,
		ROW_NUMBER() OVER (PARTITION BY SecurityId ORDER BY DateId DESC) AS RowNumber
	FROM	CLO.Calculation c WITH (NOLOCK)
	LEFT JOIN CLO.Rating moodyfacilityratingadjusted WITH (NOLOCK) ON moodyfacilityratingadjusted.RatingId = c.MoodyFacilityRatingAdjustedId
	LEFT JOIN CLO.Rating moodycashflowratingadjusted (NOLOCK) ON moodycashflowratingadjusted.RatingId = c.[MoodyCashFlowRatingAdjustedId]
	WHERE	DateId = CLO.GetPrevDayDateId();
GO
PRINT N'Altering [CLO].[vw_AggregatePosition]...';


GO
ALTER VIEW CLO.vw_AggregatePosition
AS
	SELECT [PositionDateId]
      ,[CLO1NumExposure]
      ,[CLO2NumExposure]
      ,[CLO3NumExposure]
      ,[CLO4NumExposure]
      ,[CLO5NumExposure]
      ,[CLO6NumExposure]
      ,[CLO7NumExposure]
      ,[CLO1Exposure]
      ,[CLO2Exposure]
      ,[CLO3Exposure]
      ,[CLO4Exposure]
      ,[CLO5Exposure]
      ,[CLO6Exposure]
      ,[CLO7Exposure]
      ,[CLO1PctExposure]
      ,[CLO2PctExposure]
      ,[CLO3PctExposure]
      ,[CLO4PctExposure]
      ,[CLO5PctExposure]
      ,[CLO6PctExposure]
      ,[CLO7PctExposure]
      ,[CLO1TargetPar]
      ,[CLO2TargetPar]
      ,[CLO3TargetPar]
      ,[CLO4TargetPar]
      ,[CLO5TargetPar]
      ,[CLO6TargetPar]
      ,[CLO7TargetPar]
      ,[SecurityId]
      ,[SecurityCode]
      ,[SecurityDesc]
      ,[BBGId]
      ,[Issuer]
      ,[IssuerId]
      ,[IssuerDesc]
      ,[Facility]
      ,[CallDate]
      ,[CountryDesc]
      ,[MaturityDate]
      ,[SnpIndustry]
      ,[MoodyIndustry]
      ,[IsCovLite]
      ,[IsFloating]
      ,[LienType]
      ,[IsOnWatch]
      ,[WatchObjectTypeId]
      ,[WatchObjectId]
      ,[WatchId]
      ,[WatchComments]
      ,[WatchLastUpdatedOn]
      ,[WatchUser]
      ,[SellCandidateObjectTypeId]
      ,[SellCandidateObjectId]
      ,[SellCandidateId]
      ,[SellCandidateComments]
      ,[SellCandidateLastUpdatedOn]
      ,[SellCandidateUser]
      ,[OrigSecurityCode]
      ,[OrigSecurityDesc]
      ,[OrigBBGId]
      ,[OrigIssuer]
      ,[OrigFacility]
      ,[OrigCallDate]
      ,[OrigMaturityDate]
      ,[OrigSnpIndustry]
      ,[OrigMoodyIndustry]
      ,[OrigIsFloating]
      ,[OrigLienType]
      ,[OrigMoodyFacilityRatingAdjusted]
      ,[OrigMoodyCashFlowRatingAdjusted]
      ,[Bid]
      ,[Offer]
      ,[BidNum]
      ,[OfferNum]
      ,[Spread]
      ,[LiborFloor]
      ,[MoodyCashFlowRating]
      ,[MoodyCashFlowRatingAdjusted]
      ,[MoodyFacilityRating]
      ,[MoodyRecovery]
      ,[SnPIssuerRating]
      ,[SnPIssuerRatingAdjusted]
      ,[SnPFacilityRating]
      ,[SnPfacilityRatingAdjusted]
      ,[SnPRecoveryRating]
      ,[MoodyOutlook]
      ,[MoodyWatch]
      ,[SnPWatch]
      ,[NextReportingDate]
      ,[FiscalYearEndDate]
      ,[YieldBid]
      ,[YieldOffer]
      ,[YieldMid]
      ,[CappedYieldBid]
      ,[CappedYieldOffer]
      ,[CappedYieldMid]
      ,[TargetYieldBid]
      ,[TargetYieldOffer]
      ,[TargetYieldMid]
      ,[BetterWorseBid]
      ,[BetterWorseOffer]
      ,[BetterWorseMid]
      ,[TotalCoupon]
      ,[WARF]
      ,[WARFRecovery]
      ,[Life]
      ,[TotalPar]
      ,[TotalParNum]
      ,[BODTotalPar]
      ,[MoodyFacilityRatingAdjusted]
      ,[CLOAnalyst]
      ,[HFAnalyst]
      ,[AsOfDate]
      ,[CreditScore]
      ,[LiquidityScore]
      ,[OneLLeverage]
      ,[TotalLeverage]
      ,[EVMultiple]
      ,[LTMRevenues]
      ,[LTMEBITDA]
      ,[FCF]
      ,[Comments]
      ,[BusinessDescription]
      ,[AgentBank]
      ,[SecurityMaturityDate]
      ,[IsOnAlert]
      ,[LTMFCF]
      ,[EnterpriseValue]
      ,[SeniorLeverage]
      ,[CostPrice]
      ,[CostPriceNum]
      ,[PrevDayBidNum]
      ,[PrevDayOfferNum]
      ,[PrevDayBid]
      ,[PrevDayOffer]
      ,[PriceMove]
      ,[SearchText]
      ,[LienTypeId]
      ,[ScoreDescription]
      ,[GlobalAmount]
      ,[IsPrivate]
      ,[Sponsor]
      ,[CLO1MatrixImpliedSpread]
      ,[CLO2MatrixImpliedSpread]
      ,[CLO3MatrixImpliedSpread]
      ,[CLO4MatrixImpliedSpread]
      ,[CLO5MatrixImpliedSpread]
      ,[CLO6MatrixImpliedSpread]
      ,[CLO7MatrixImpliedSpread]
      ,[CLO1DifferentialImpliedSpread]
      ,[CLO2DifferentialImpliedSpread]
      ,[CLO3DifferentialImpliedSpread]
      ,[CLO4DifferentialImpliedSpread]
      ,[CLO5DifferentialImpliedSpread]
      ,[CLO6DifferentialImpliedSpread]
      ,[CLO7DifferentialImpliedSpread] 
	  ,[CLO1MatrixWarfRecovery]
      ,[CLO2MatrixWarfRecovery]
      ,[CLO3MatrixWarfRecovery]
      ,[CLO4MatrixWarfRecovery]
      ,[CLO5MatrixWarfRecovery]
      ,[CLO6MatrixWarfRecovery]
      ,[CLO7MatrixWarfRecovery]
	  , zSnPAssetRecoveryRating
	  , SnpWarf
	  , SnpLgd
	  , MoodysLgd
	  , YieldAvgLgd
	  , SnpAAARecovery
	  , SnpCreditWatch
	  , LiborBaseRate
	  , [CLO-4 WARF]
	  FROM CLO.AggregatedPosition 

	  WHERE 

	  PositionDateId = CLO.GetPrevDayDateId()
GO
PRINT N'Altering [CLO].[vw_MarketData]...';


GO
ALTER VIEW [CLO].[vw_MarketData]
AS
	SELECT m.DateId, m.MarketDataId MarketDataId, o.OverrideMarketDataId OverrideMarketDataId
		, m.SecurityId, m.FundId, COALESCE(o.Bid, currentupload.Bid, m.Bid, previousupload.Bid) AS Bid
		, COALESCE(o.Offer, currentupload.Offer, m.Offer, previousupload.Offer) AS Offer
		, COALESCE(o.CostPrice, m.CostPrice) AS CostPrice, ISNULL(o.Spread, m.Spread) AS Spread
		, ISNULL(o.LiborFloor, m.LiborFloor) AS LiborFloor, moodysdprating.RatingDesc AS MoodyDPRating
		, moodycashflowrating.RatingDesc AS MoodyCashFlowRating
		, moodycashflowratingadjusted.RatingDesc AS MoodyCashFlowRatingAdjusted
		, moodyfacilityrating.RatingDesc AS MoodyFacilityRating
		, ISNULL(o.MoodyFacilityRatingId, m.MoodyFacilityRatingId) AS MoodyFacilityRatingId
		, ISNULL(o.MoodyRecovery, m.MoodyRecovery) AS MoodyRecovery
		, snpissuerrating.RatingDesc AS SnPIssuerRating, snpissuerratingadjusted.RatingDesc AS SnPIssuerRatingAdjusted
		, snpfacilityrating.RatingDesc AS SnPFacilityRating, snpfacilityratingadjusted.RatingDesc AS SnPfacilityRatingAdjusted
		, snprecoveryrating.RatingDesc AS SnPRecoveryRating, ISNULL(o.MoodyOutlook, m.MoodyOutlook) AS MoodyOutlook
		, ISNULL(o.MoodyWatch, m.MoodyWatch) AS MoodyWatch, ISNULL(o.SnPWatch, m.SnPWatch) AS SnPWatch
		, ISNULL(o.NextReportingDate, m.NextReportingDate) AS NextReportingDate
		, ISNULL(o.FiscalYearEndDate, m.FiscalYearEndDate) AS FiscalYearEndDate
		, ISNULL(o.AgentBank, m.AgentBank) AS AgentBank
		, m.SnpCreditWatch
		, ISNULL(o.[LiborBaseRate], m.[LiborBaseRate]) AS [LiborBaseRate]
		, MoodyCashFlowRatingAdjustedId = ISNULL(o.MoodyCashFlowRatingAdjustedId, m.MoodyCashFlowRatingAdjustedId)
	FROM CLO.MarketData m WITH (NOLOCK)
	LEFT JOIN CLO.OverrideMarketData o WITH (NOLOCK) ON m.DateId = o.DateId
											AND m.SecurityId = o.SecurityId
											AND m.FundId = o.FundId
	LEFT JOIN CLO.Rating moodysdprating WITH (NOLOCK) ON moodysdprating.RatingId = ISNULL(o.[MoodyDPRatingId], m.[MoodyDPRatingId])
	LEFT JOIN CLO.Rating moodycashflowrating WITH (NOLOCK) ON moodycashflowrating.RatingId = ISNULL(o.MoodyCashFlowRatingId, m.MoodyCashFlowRatingId)
	LEFT JOIN CLO.Rating moodycashflowratingadjusted WITH (NOLOCK)
		ON moodycashflowratingadjusted.RatingId = ISNULL(o.MoodyCashFlowRatingAdjustedId, m.MoodyCashFlowRatingAdjustedId)
	LEFT JOIN CLO.Rating moodyfacilityrating WITH (NOLOCK) ON moodyfacilityrating.RatingId = ISNULL(o.MoodyFacilityRatingId, m.MoodyFacilityRatingId)
	LEFT JOIN CLO.Rating snpissuerrating WITH (NOLOCK) ON snpissuerrating.RatingId = ISNULL(o.SnPIssuerRatingId, m.SnPIssuerRatingId)
	LEFT JOIN CLO.Rating snpissuerratingadjusted WITH (NOLOCK)
		ON snpissuerratingadjusted.RatingId = ISNULL(o.SnPIssuerRatingAdjustedId, m.SnPIssuerRatingAdjustedId)
	LEFT JOIN CLO.Rating snpfacilityrating WITH (NOLOCK) ON snpfacilityrating.RatingId = ISNULL(o.SnPFacilityRatingId, m.SnPFacilityRatingId)
	LEFT JOIN CLO.Rating snpfacilityratingadjusted WITH (NOLOCK)
		ON snpfacilityratingadjusted.RatingId = ISNULL(o.SnPfacilityRatingAdjustedId, m.SnPfacilityRatingAdjustedId)
	LEFT JOIN CLO.Rating snprecoveryrating WITH (NOLOCK) ON snprecoveryrating.RatingId = ISNULL(o.SnPRecoveryRatingId, m.SnPRecoveryRatingId)
	LEFT JOIN CLO.vw_Price currentupload WITH (NOLOCK) ON m.DateId = currentupload.DateId
											AND m.SecurityId = currentupload.SecurityId
	LEFT JOIN CLO.vw_Price previousupload WITH (NOLOCK) ON m.DateId > currentupload.DateId
											AND m.SecurityId = currentupload.SecurityId
	JOIN CLO.Position p WITH (NOLOCK) ON m.SecurityId = p.SecurityId
											AND m.FundId = p.FundId
											AND m.DateId = p.DateId
	WHERE m.DateId = CLO.GetPrevDayDateId()
GO
PRINT N'Altering [CLO].[spGenerateAggregatedPositions]...';


GO
ALTER PROCEDURE [CLO].[spGenerateAggregatedPositions]

AS

delete from CLO.AggregatedPosition where PositionDateId = CLO.GetPrevDayDateId()

SELECT SecurityId, [CLO-1], [CLO-2], [CLO-3], [CLO-4], [CLO-5], [CLO-6], [CLO-7]
into #PivotedMatrixImpliedSpread

FROM (SELECT c.[MatrixImpliedSpread], f.FundCode, c.SecurityId
			FROM CLO.vw_Calculation c WITH (NOLOCK)
			JOIN CLO.Fund f WITH(NOLOCK) ON f.FundId = c.FundId
			WHERE c.DateId = CLO.GetPrevDayDateId()
			) AS s PIVOT
(MAX([MatrixImpliedSpread]) FOR FundCode IN ([CLO-1], [CLO-2], [CLO-3], [CLO-4], [CLO-5], [CLO-6], [CLO-7]) )AS pvt


SELECT SecurityId, [CLO-1], [CLO-2], [CLO-3], [CLO-4], [CLO-5], [CLO-6], [CLO-7]
into #PivotedMatrixWarfRecovery
FROM (SELECT c.MatrixWARFRecovery, f.FundCode, c.SecurityId
			FROM CLO.vw_Calculation c WITH (NOLOCK)
			JOIN CLO.Fund f WITH(NOLOCK) ON f.FundId = c.FundId
			WHERE c.DateId = CLO.GetPrevDayDateId()
			) AS s PIVOT
(MAX(MatrixWARFRecovery) FOR FundCode IN ([CLO-1], [CLO-2], [CLO-3], [CLO-4], [CLO-5], [CLO-6], [CLO-7]) )AS pvt






		;WITH wsodata AS
		(
			SELECT SecurityID AS SecurityCode, MIN(BankDeal_GlobalAmount) AS MinIssueSize, MAX(BankDeal_GlobalAmount) AS MaxIssueSize
			FROM CLO.WsoExtractAssets
			WHERE DateId = [CLO].[GetPrevDayDateId]()
			GROUP BY SecurityID
		),
		loancontract AS
		(
			SELECT SecurityCode, AVG(C.GlobalAmount) AS Average, MIN(C.GlobalAmount) MinAmt, MAX(C.GlobalAmount) AS MaxAmt
			FROM (
			SELECT AssetLoanXIDAssetIDName AS SecurityCode, F.FundId, SUM(C.ContractGlobalAmount) AS GlobalAmount FROM CLO.LoanContract C INNER JOIN Yoda.CLO.Fund F
			ON F.PortfolioName = C.PortfolioName
			WHERE C.AsOfDate = DataMarts.dbo.GetDateFromDateId(Yoda.CLO.GetPrevDayDateId())
			GROUP BY C.AssetLoanXIDAssetIDName, F.FundId) C
			GROUP BY C.SecurityCode
		),
		totalPar AS
		(
			SELECT F.SecurityId, SUM(F.Exposure) AS TotalExposure
			FROM CLO.vw_PositionCountryFund F
			WHERE DateId = CLO.GetPrevDayDateId()
			GROUP BY F.SecurityId
		)

INSERT INTO [CLO].[AggregatedPosition]
           ([PositionDateId]
           ,[CLO1NumExposure]
           ,[CLO2NumExposure]
           ,[CLO3NumExposure]
           ,[CLO4NumExposure]
           ,[CLO5NumExposure]
           ,[CLO6NumExposure]
           ,[CLO7NumExposure]

           ,[CLO1Exposure]
           ,[CLO2Exposure]
           ,[CLO3Exposure]
           ,[CLO4Exposure]
           ,[CLO5Exposure]
           ,[CLO6Exposure]
           ,[CLO7Exposure]

           ,[CLO1PctExposure]
           ,[CLO2PctExposure]
           ,[CLO3PctExposure]
           ,[CLO4PctExposure]
           ,[CLO5PctExposure]
           ,[CLO6PctExposure]
           ,[CLO7PctExposure]

           ,[CLO1TargetPar]
           ,[CLO2TargetPar]
           ,[CLO3TargetPar]
           ,[CLO4TargetPar]
           ,[CLO5TargetPar]
           ,[CLO6TargetPar]
           ,[CLO7TargetPar]

           ,[SecurityId]
           ,[SecurityCode]
           ,[SecurityDesc]
           ,[BBGId]
           ,[Issuer]
           ,[IssuerId]
           ,[IssuerDesc]
           ,[Facility]
           ,[CallDate]
           ,[CountryDesc]
           ,[MaturityDate]
           ,[SnpIndustry]
           ,[MoodyIndustry]

           ,[IsCovLite]
           ,[IsFloating]
           ,[LienType]
           ,[IsOnWatch]
           ,[WatchObjectTypeId]
           ,[WatchObjectId]
           ,[WatchId]
           ,[WatchComments]
           ,[WatchLastUpdatedOn]
           ,[WatchUser]

           ,[SellCandidateObjectTypeId]
           ,[SellCandidateObjectId]
           ,[SellCandidateId]
           ,[SellCandidateComments]
           ,[SellCandidateLastUpdatedOn]
           ,[SellCandidateUser]
           ,[OrigSecurityCode]
           ,[OrigSecurityDesc]
           ,[OrigBBGId]
           ,[OrigIssuer]

           ,[OrigFacility]
           ,[OrigCallDate]
           ,[OrigMaturityDate]
           ,[OrigSnpIndustry]
           ,[OrigMoodyIndustry]
           ,[OrigIsFloating]
           ,[OrigLienType]
           ,[OrigMoodyFacilityRatingAdjusted]
           ,[OrigMoodyCashFlowRatingAdjusted]
           ,[Bid]

           ,[Offer]
           ,[BidNum]
           ,[OfferNum]
           ,[Spread]
           ,[LiborFloor]
           ,[MoodyCashFlowRating]
           ,[MoodyCashFlowRatingAdjusted]
           ,[MoodyFacilityRating]
           ,[MoodyRecovery]
           ,[SnPIssuerRating]
           ,[SnPIssuerRatingAdjusted]
           ,[SnPFacilityRating]
           ,[SnPfacilityRatingAdjusted]
           ,[SnPRecoveryRating]
           ,[MoodyOutlook]

           ,[MoodyWatch]
           ,[SnPWatch]
           ,[NextReportingDate]
           ,[FiscalYearEndDate]
           ,[YieldBid]
           ,[YieldOffer]
           ,[YieldMid]
           ,[CappedYieldBid]
           ,[CappedYieldOffer]
           ,[CappedYieldMid]
           ,[TargetYieldBid]
           ,[TargetYieldOffer]
           ,[TargetYieldMid]
           ,[BetterWorseBid]
           ,[BetterWorseOffer]

           ,[BetterWorseMid]
           ,[TotalCoupon]
           ,[WARF]
           ,[WARFRecovery]
           ,[Life]
           ,[TotalPar]
           ,[TotalParNum]
           ,[BODTotalPar]
           ,[MoodyFacilityRatingAdjusted]
           ,[CLOAnalyst]
           ,[HFAnalyst]
           ,[AsOfDate]
           ,[CreditScore]
           ,[LiquidityScore]
           ,[OneLLeverage]

           ,[TotalLeverage]
           ,[EVMultiple]
           ,[LTMRevenues]
           ,[LTMEBITDA]
           ,[FCF]
           ,[Comments]
           ,[BusinessDescription]
           ,[AgentBank]
           ,[SecurityMaturityDate]
           ,[IsOnAlert]
           ,[LTMFCF]
           ,[EnterpriseValue]
           ,[SeniorLeverage]
           ,[CostPrice]
           ,[CostPriceNum]

           ,[PrevDayBidNum]
           ,[PrevDayOfferNum]
           ,[PrevDayBid]
           ,[PrevDayOffer]
           ,[PriceMove]
           ,[SearchText]
           ,[LienTypeId]
           ,[ScoreDescription]
           ,[GlobalAmount]
		   ,[IsPrivate]
		   ,[Sponsor]

           ,[CLO1MatrixImpliedSpread]
           ,[CLO2MatrixImpliedSpread]
           ,[CLO3MatrixImpliedSpread]
           ,[CLO4MatrixImpliedSpread]
           ,[CLO5MatrixImpliedSpread]
           ,[CLO6MatrixImpliedSpread]

           ,[CLO7MatrixImpliedSpread]
           ,[CLO1DifferentialImpliedSpread]
           ,[CLO2DifferentialImpliedSpread]
           ,[CLO3DifferentialImpliedSpread]
           ,[CLO4DifferentialImpliedSpread]
           ,[CLO5DifferentialImpliedSpread]
           ,[CLO6DifferentialImpliedSpread]
           ,[CLO7DifferentialImpliedSpread]

		   ,[CLO1MatrixWarfRecovery]
		   ,[CLO2MatrixWarfRecovery]
		   ,[CLO3MatrixWarfRecovery]
		   ,[CLO4MatrixWarfRecovery]
		   ,[CLO5MatrixWarfRecovery]
		   ,[CLO6MatrixWarfRecovery]
		   ,[CLO7MatrixWarfRecovery]		   
		   ,[zSnPAssetRecoveryRating]
		   ,[SnpWarf]
		   ,[SnpLgd]
		   ,[MoodysLgd]
		   ,[YieldAvgLgd]
		   ,[SnpAAARecovery]
		   ,[SnpCreditWatch]
		   ,[LiborBaseRate]
		   ,[CLO-4 WARF]
		   )

SELECT 
		  CLO.GetPrevDayDateId() PositionDateId
		  , NULLIF((ISNULL(MAX(pos.[CLO-1]),0) + ISNULL(MAX(allocation.[CLO-1]),0)),0)	CLO1NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-2]),0) + ISNULL(MAX(allocation.[CLO-2]),0)),0)	CLO2NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-3]),0) + ISNULL(MAX(allocation.[CLO-3]),0)),0)	CLO3NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-4]),0) + ISNULL(MAX(allocation.[CLO-4]),0)),0)	CLO4NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-5]),0) + ISNULL(MAX(allocation.[CLO-5]),0)),0)	CLO5NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-6]),0) + ISNULL(MAX(allocation.[CLO-6]),0)),0)	CLO6NumExposure
		  , NULLIF((ISNULL(MAX(pos.[CLO-7]),0) + ISNULL(MAX(allocation.[CLO-7]),0)),0)	CLO7NumExposure

		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-1]),0) + ISNULL(MAX(allocation.[CLO-1]),0)),0), '#,###')	CLO1Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-2]),0) + ISNULL(MAX(allocation.[CLO-2]),0)),0), '#,###')	CLO2Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-3]),0) + ISNULL(MAX(allocation.[CLO-3]),0)),0), '#,###')	CLO3Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-4]),0) + ISNULL(MAX(allocation.[CLO-4]),0)),0), '#,###')	CLO4Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-5]),0) + ISNULL(MAX(allocation.[CLO-5]),0)),0), '#,###')	CLO5Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-6]),0) + ISNULL(MAX(allocation.[CLO-6]),0)),0), '#,###')	CLO6Exposure
		  , FORMAT(NULLIF((ISNULL(MAX(pos.[CLO-7]),0) + ISNULL(MAX(allocation.[CLO-7]),0)),0), '#,###')	CLO7Exposure

		  , FORMAT(((ISNULL(MAX(pos.[CLO-1]),0) + ISNULL(MAX(allocation.[CLO-1]),0))/ISNULL(MAX(targetPar.[CLO-1]),1)) , 'p')  CLO1PctExposure   
		  , FORMAT(((ISNULL(MAX(pos.[CLO-2]),0) + ISNULL(MAX(allocation.[CLO-2]),0))/ISNULL(MAX(targetPar.[CLO-2]),1)) , 'p')  CLO2PctExposure 
		  , FORMAT(((ISNULL(MAX(pos.[CLO-3]),0) + ISNULL(MAX(allocation.[CLO-3]),0))/ISNULL(MAX(targetPar.[CLO-3]),1)) , 'p')  CLO3PctExposure 
		  , FORMAT(((ISNULL(MAX(pos.[CLO-4]),0) + ISNULL(MAX(allocation.[CLO-4]),0))/ISNULL(MAX(targetPar.[CLO-4]),1)) , 'p')  CLO4PctExposure 
		  , FORMAT(((ISNULL(MAX(pos.[CLO-5]),0) + ISNULL(MAX(allocation.[CLO-5]),0))/ISNULL(MAX(targetPar.[CLO-5]),1)) , 'p')  CLO5PctExposure
		  , FORMAT(((ISNULL(MAX(pos.[CLO-6]),0) + ISNULL(MAX(allocation.[CLO-6]),0))/ISNULL(MAX(targetPar.[CLO-6]),1)) , 'p')  CLO6PctExposure
		  , FORMAT(((ISNULL(MAX(pos.[CLO-7]),0) + ISNULL(MAX(allocation.[CLO-7]),0))/ISNULL(MAX(targetPar.[CLO-7]),1)) , 'p')  CLO7PctExposure

		  , MAX(targetPar.[CLO-1]) CLO1TargetPar
		  , MAX(targetPar.[CLO-2]) CLO2TargetPar
		  , MAX(targetPar.[CLO-3]) CLO3TargetPar
		  , MAX(targetPar.[CLO-4]) CLO4TargetPar
		  , MAX(targetPar.[CLO-5]) CLO5TargetPar
		  , MAX(targetPar.[CLO-6]) CLO6TargetPar
		  , MAX(targetPar.[CLO-7]) CLO7TargetPar

		  , s.SecurityId
		  , MAX(s.SecurityCode		)		SecurityCode
		  , MAX(s.SecurityDesc		)		SecurityDesc
		  , MAX(s.BBGId			)		BBGId
		  , MAX(s.Issuer			)		Issuer
		  , MAX(s.IssuerId			)		IssuerId
		  , MAX(s.IssuerDesc			)	IssuerDesc
		  , MAX(LTRIM(s.Facility)) Facility
		  , MAX(CASE WHEN s.CallDate <> '1900-01-01' THEN  CONVERT(VARCHAR(10), s.CallDate, 101) ELSE NULL END) CallDate
		  , COALESCE(MAX(country.[CLO-1]), MAX(country.[CLO-2]), MAX(country.[CLO-3]), MAX(country.[CLO-4]), MAX(country.[CLO-5]), MAX(country.[CLO-6]), MAX(country.[CLO-7]))  CountryDesc
		  , MAX(CONVERT(VARCHAR(10), s.MaturityDate, 101)) MaturityDate
		  , MAX(s.SnpIndustry)				SnpIndustry
		  , MAX(s.MoodyIndustry)			MoodyIndustry

		  , COALESCE(MAX(covlite.[CLO-1]), MAX(covlite.[CLO-2]), MAX(covlite.[CLO-3]), MAX(covlite.[CLO-4]), MAX(covlite.[CLO-5]), MAX(covlite.[CLO-6]), MAX(covlite.[CLO-7]))  IsCovLite
		  , MAX(CASE WHEN (s.IsFloating = 1) THEN 'Floating' ELSE 'Fixed' END) IsFloating
		  , MAX(s.LienType						)		LienType
		  , s.IsOnWatch					
		  , MAX(s.WatchObjectTypeId				)		WatchObjectTypeId
		  , MAX(s.WatchObjectId					)		WatchObjectId					
		  , MAX(s.WatchId						)		WatchId						
		  , MAX(s.WatchComments				)		WatchComments				
		  , MAX(s.WatchLastUpdatedOn				)		WatchLastUpdatedOn				
		  , MAX(s.WatchUser						)		WatchUser						

		  , MAX(s.SellCandidateObjectTypeId) SellCandidateObjectTypeId
		  , MAX(s.SellCandidateObjectId) SellCandidateObjectId					
		  , MAX(s.SellCandidateId) SellCandidateId						
		  , MAX(s.SellCandidateComments) SellCandidateComments				
		  , MAX(s.SellCandidateLastUpdatedOn) SellCandidateLastUpdatedOn				
		  , MAX(s.SellCandidateUser) SellCandidateUser						
		  , MAX(s.OrigSecurityCode				)		OrigSecurityCode				
		  , MAX(s.OrigSecurityDesc				)		OrigSecurityDesc				
		  , MAX(s.OrigBBGId					)		OrigBBGId					
		  , MAX(s.OrigIssuer					)		OrigIssuer		
		  
		  , MAX(s.OrigFacility					)		OrigFacility					
		  , MAX(s.OrigCallDate 				)		OrigCallDate 				
		  , MAX(s.OrigMaturityDate				)		OrigMaturityDate				
		  , MAX(s.OrigSnpIndustry				)		OrigSnpIndustry				
		  , MAX(s.OrigMoodyIndustry			)		OrigMoodyIndustry			
		  , MAX(s.OrigIsFloating 				)		OrigIsFloating 				
		  , MAX(s.OrigLienType					)		OrigLienType					
		  , MAX(c.MoodyFacilityRatingAdjusted	)	AS OrigMoodyFacilityRatingAdjusted
		  , MAX(ISNULL(c.MoodyCashFlowRatingAdjusted, m.MoodyCashFlowRatingAdjusted))	AS OrigMoodyCashFlowRatingAdjusted
		  , CONVERT(VARCHAR, CAST(AVG(m.Bid) AS MONEY),1)  Bid

		  , CONVERT(VARCHAR, CAST(AVG(m.Offer)AS MONEY),1) Offer
		  , MAX(m.Bid) BidNum
		  , MAX(m.Offer) OfferNum
		  , CAST(MAX(m.Spread) AS NUMERIC(20,2)) Spread	
		  , CAST(MAX(m.LiborFloor) AS NUMERIC(20,2))	LiborFloor
		  , MAX(m.MoodyCashFlowRating) MoodyCashFlowRating
		  , COALESCE(MAX(c.MoodyCashFlowRatingAdjusted),MAX(s.MoodyCashFlowRatingAdjusted), MAX(m.MoodyCashFlowRatingAdjusted)) MoodyCashFlowRatingAdjusted
		  , MAX(m.MoodyFacilityRating)		MoodyFacilityRating
		  , MAX(m.MoodyRecovery)		    MoodyRecovery
		  , MAX(m.SnPIssuerRating)  		SnPIssuerRating				
		  , MAX(c.SnPIssuerRatingAdjusted)	SnPIssuerRatingAdjusted		
		  , MAX(m.SnPFacilityRating			)		SnPFacilityRating			
		  , MAX(m.SnPfacilityRatingAdjusted	)		SnPfacilityRatingAdjusted	
		  , MAX(m.SnPRecoveryRating			)		SnPRecoveryRating			
		  , MAX(m.MoodyOutlook					)		MoodyOutlook					

		  , MAX(m.MoodyWatch					)		MoodyWatch					
		  , MAX(m.SnPWatch						)		SnPWatch						
		  , CONVERT(VARCHAR(10), MAX(m.NextReportingDate), 101) NextReportingDate
		  , CONVERT(VARCHAR(10), MAX(m.FiscalYearEndDate), 101) FiscalYearEndDate
		  , CAST(AVG(c.YieldBid			)AS NUMERIC(20,2))			YieldBid				
		  , CAST(AVG(c.YieldOffer			)AS NUMERIC(20,2))			YieldOffer			
		  , CAST(AVG(c.YieldMid			)AS NUMERIC(20,2))			YieldMid				
		  , CAST(AVG(c.CappedYieldBid		)AS NUMERIC(20,2))			CappedYieldBid		
		  , CAST(AVG(c.CappedYieldOffer	)AS NUMERIC(20,2))			CappedYieldOffer		
		  , CAST(AVG(c.CappedYieldMid		)AS NUMERIC(20,2))			CappedYieldMid		
		  , CAST(AVG(c.TargetYieldBid		)AS NUMERIC(20,2))			TargetYieldBid		
		  , CAST(AVG(c.TargetYieldOffer	)AS NUMERIC(20,2))			TargetYieldOffer		
		  , CAST(AVG(c.TargetYieldMid		)AS NUMERIC(20,2))			TargetYieldMid		
		  , CAST(AVG(c.BetterWorseBid		)AS NUMERIC(20,2))			BetterWorseBid		
		  , CAST(AVG(c.BetterWorseOffer	)AS NUMERIC(20,2))			BetterWorseOffer		

		  , CAST(AVG(c.BetterWorseMid		)AS NUMERIC(20,2))			BetterWorseMid		
		  , CAST(AVG(c.TotalCoupon			)AS NUMERIC(20,2))			TotalCoupon			
		  , CAST(AVG(CASE WHEN c.FundId = 4 THEN NULL else c.WARF end)AS NUMERIC(20,2))			WARF					
		  , CAST(AVG(c.WARFRecovery		)AS NUMERIC(20,2))			WARFRecovery			
		  , CAST(AVG(c.Life				)AS NUMERIC(20,2))			Life
		  , FORMAT(NULLIF(ISNULL(MAX(TP.TotalExposure), 0),0), '#,###') TotalPar
		  , ISNULL(MAX(TP.TotalExposure), 0) TotalParNum
		  , (ISNULL(MAX(c.TotalPar),0)) BODTotalPar
		  , ISNULL(MAX(s.MoodyFacilityRatingAdjusted),  MAX(c.MoodyFacilityRatingAdjusted)) MoodyFacilityRatingAdjusted
		  , MAX(a.CLOAnalyst)			CLOAnalyst
		  , MAX(a.HFAnalyst)				HFAnalyst
		  , CONVERT(VARCHAR(10), MAX(a.AsOfDate), 101) AsOfDate
		  , MAX(a.CreditScore)	CreditScore	
		  , MAX(a.LiquidityScore)	LiquidityScore		
		  , MAX(a.OneLLeverage)	OneLLeverage		

		  , CONVERT(VARCHAR, CAST(MAX(a.TotalLeverage) AS MONEY), 1) TotalLeverage
		  , CONVERT(VARCHAR, CAST(MAX(a.EVMultiple) AS MONEY), 1) EVMultiple
		  , CONVERT(VARCHAR, CAST(MAX(a.LTMRevenues) AS MONEY), 1) LTMRevenues
		  , CONVERT(VARCHAR, CAST(MAX(a.LTMEBITDA )AS MONEY), 1) LTMEBITDA
		  , CONVERT(VARCHAR, CAST(MAX(a.FCF) AS MONEY), 1) FCF
		  , MAX(a.Comments)						Comments	
		  , MAX(a.BusinessDescription)			BusinessDescription	
		  , MAX(a.AgentBank			)			AgentBank			
		  , MAX(s.MaturityDate) SecurityMaturityDate
		  , CAST(0 AS BIT) AS IsOnAlert
		  , CAST(MAX(a.LTMFCF) AS NUMERIC(38,2)) LTMFCF
		  , CAST(MAX(a.EnterpriseValue) AS NUMERIC(10,2)) EnterpriseValue
		  , CAST(MAX(a.SeniorLeverage) AS NUMERIC(10,2)) SeniorLeverage
		  , CONVERT(VARCHAR, CAST(MAX(m.CostPrice) AS MONEY), 1) CostPrice
		  , MAX(m.CostPrice) CostPriceNum

		  , MAX(pm.Bid)	PrevDayBidNum
		  , MAX(pm.Offer)	PrevDayOfferNum
		  , CONVERT(VARCHAR, CAST(MAX(pm.Bid) AS MONEY), 1) PrevDayBid
		  , CONVERT(VARCHAR, CAST(MAX(pm.Offer) AS MONEY), 1) PrevDayOffer
		  , CASE WHEN ISNULL(MAX(m.Bid),0) <> 0 AND ISNULL(MAX(pm.Bid),0) <> 0 THEN (MAX(m.Bid) - MAX(pm.Bid)) ELSE NULL END PriceMove
		  , NULL AS SearchText
		  , MAX(s.LienTypeId) LienTypeId
		  , MAX(cs.ScoreDescription) ScoreDescription
		  , ISNULL(MAX(lc.MaxAmt), MAX(wso.MaxIssueSize)) GlobalAmount
		  , a.IsPrivate
		  , a.Sponsor
		  , CAST(ISNULL(MAX(matrix.[CLO-1]),0) as decimal(28,2)) CLO1MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-2]),0) as decimal(28,2)) CLO2MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-3]),0) as decimal(28,2)) CLO3MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-4]),0) as decimal(28,2)) CLO4MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-5]),0) as decimal(28,2)) CLO5MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-6]),0) as decimal(28,2)) CLO6MatrixImpliedSpread
		  , CAST(ISNULL(MAX(matrix.[CLO-7]),0) as decimal(28,2)) CLO7MatrixImpliedSpread
		  , CLO1DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-1]),0)   as decimal(28,2))
		  , CLO2DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-2]),0)   as decimal(28,2))
		  , CLO3DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-3]),0)   as decimal(28,2))
		  , CLO4DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-4]),0)   as decimal(28,2))
		  , CLO5DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-5]),0)   as decimal(28,2))
		  , CLO6DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-6]),0)   as decimal(28,2))
		  , CLO7DifferentialImpliedSpread = CAST( ISNULL(MAX(m.Spread),0) - ISNULL(MAX(matrix.[CLO-7]),0)   as decimal(28,2))

		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-1]),0) as decimal(28,2)) CLO1MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-2]),0) as decimal(28,2)) CLO2MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-3]),0) as decimal(28,2)) CLO3MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-4]),0) as decimal(28,2)) CLO4MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-5]),0) as decimal(28,2)) CLO5MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-6]),0) as decimal(28,2)) CLO6MatrixWarfRecovery
		  , CAST(ISNULL(MAX(matrixwarfrecovery.[CLO-7]),0) as decimal(28,2)) CLO7MatrixWarfRecovery
		  , MAX(c.zSnPAssetRecoveryRating)
		  , AVG(c.SnpWarf)
		  ,	AVG(C.SnpLgd)
		  , AVG(c.MoodysLgd)
		  , AVG(c.YieldAvgLgd)
		  , MAX(c.SnpAAARecovery)
		  , MAX(m.SnpCreditWatch)
		  , FORMAT(AVG(NULLIF(ISNULL(m.LiborBaseRate,0),0)) , 'p')  LiborBaseRate   
		  , CAST(AVG(CASE WHEN c.FundId <> 4 THEN NULL else c.WARF end)AS NUMERIC(20,2))			[Fund-4 WARF]
    FROM  CLO.vw_Security s  WITH (NOLOCK)
	      LEFT  JOIN CLO.vw_SecurityMarket m WITH (NOLOCK) ON s.SecurityId			= m.SecurityId 
		  LEFT  JOIN CLO.vw_PrevDaySecurityMarket pm WITH (NOLOCK) ON s.SecurityId	= pm.SecurityId 
		  LEFT  JOIN CLO.vw_CurrentAnalystResearch a WITH (NOLOCK) ON a.IssuerId	= s.IssuerId
		  LEFT  JOIN CLO.vw_Calculation c WITH (NOLOCK) ON s.SecurityId			= c.SecurityId 
		  LEFT  JOIN CLO.vw_PivotedPositionExposure		pos  WITH (NOLOCK) ON pos.SecurityId = s.SecurityId
		  LEFT  JOIN CLO.vw_PivotedPositionCountry		country  WITH (NOLOCK) ON country.SecurityId = s.SecurityId
		  LEFT  JOIN CLO.vw_PivotedPositionIsCovLite	covlite  WITH (NOLOCK) ON covlite.SecurityId = s.SecurityId
		  LEFT  JOIN CLO.vw_PivotedTradeAllocation	allocation  WITH (NOLOCK) ON allocation.SecurityId = s.SecurityId
		  LEFT  JOIN CLO.#PivotedMatrixImpliedSpread	matrix  WITH (NOLOCK) ON matrix.SecurityId = s.SecurityId
		  LEFT  JOIN CLO.#PivotedMatrixWarfRecovery		matrixwarfrecovery  WITH (NOLOCK) ON matrixwarfrecovery.SecurityId = s.SecurityId

		  LEFT OUTER JOIN CLO.CreditScore cs ON CAST(a.CreditScore AS INT) = cs.Id
		  LEFT OUTER JOIN wsodata wso ON wso.SecurityCode = s.SecurityCode
		  LEFT OUTER JOIN loancontract lc ON lc.SecurityCode = s.SecurityCode
		  LEFT OUTER JOIN totalPar TP ON TP.SecurityId = s.SecurityId
		  CROSS JOIN CLO.vw_PivotedFundTargetPar	targetpar
	GROUP BY S.SecurityId,s.IsOnWatch, a.IsPrivate, a.Sponsor
	

	drop table #PivotedMatrixImpliedSpread
	drop table #PivotedMatrixWarfRecovery

RETURN 0
GO
PRINT N'Altering [CLO].[LoadWso_MarketData]...';


GO
ALTER PROCEDURE [CLO].[LoadWso_MarketData]
(
    @asOfDateId INT,
    @datasetKeys CLO.DatasetKeys READONLY
)
AS
    --DECLARE @DatasetKeys TABLE (DatasetKey INT)
    --INSERT INTO @DatasetKeys
    --(
    --    DatasetKey
    --)
    --SELECT (1997)
    --UNION
    --SELECT (1998)
    --UNION
    --SELECT (1999)
    --UNION
    --SELECT (2000)

    BEGIN TRANSACTION

    DELETE FROM CLO.MarketData
    WHERE DateId = @asOfDateId
	AND FundId IN (SELECT DISTINCT D.DealId
		FROM [CLO].[WsoExtractAssets] EA
        JOIN @DatasetKeys DK
            ON DK.DatasetKey = EA.DatasetKey
        JOIN DataMarts.dbo.WsoDatasets D
            ON DK.DatasetKey = D.DatasetKey)

    DELETE FROM CLO.WSOMarketData
    WHERE DateId = @asOfDateId
	AND FundId IN (SELECT DISTINCT D.DealId
		FROM [CLO].[WsoExtractAssets] EA
        JOIN @DatasetKeys DK
            ON DK.DatasetKey = EA.DatasetKey
        JOIN DataMarts.dbo.WsoDatasets D
            ON DK.DatasetKey = D.DatasetKey)

    INSERT INTO CLO.MarketData
    (
        FundId,
		DateId,
        SecurityId,
        Bid,
        Offer,
		CostPrice,
        Spread,
        LiborFloor,
		LiborBaseRate,
		[MoodyDPRatingId],
        MoodyCashFlowRatingId,
        MoodyCashFlowRatingAdjustedId,
        MoodyFacilityRatingId,
        MoodyRecovery,
        SnPIssuerRatingId,
        SnPIssuerRatingAdjustedId,
        SnPFacilityRatingId,
        SnPfacilityRatingAdjustedId,
        SnPRecoveryRatingId,
        MoodyOutlook,
        MoodyWatch,
        SnPWatch,
		SnpCreditWatch,
        NextReportingDate,
        FiscalYearEndDate,
        AgentBank,
        CreatedOn,
        CreatedBy,
        LastUpdatedOn,
        LastUpdatedBy
    )
    SELECT 
		D.DealID AS FundId,
		@asOfDateId,
        (
            SELECT TOP 1
                SecurityId
            FROM CLO.Security
            WHERE SecurityCode = EA.SecurityId
        ) AS SecurityId,
        CAST(EA.MarkPrice_BidPrice AS NUMERIC(38, 10)) AS Bid, --NEED TO MAKE SURE ABOUT SCALE
        CAST(EA.MarkPrice_AskPrice AS NUMERIC(38, 10)) AS Offer,                                           --'***MISSING***' 
		CAST(EA.[CostPrice] AS NUMERIC(38, 10)) AS CostPrice,
        EA.WeightedAvgSpread * 100 AS Spread,
        ([Adjusted WAC] - [Adjusted WAS]) * 100 AS LiborFloor, --CALC PER WENDY
		--4)	Floor �it�s working in such a way that it�s showing up as a negative number on our delayed draw loans, which isn�t right� using Spectrum Delayed Draw, as an example, it�s technically earning a ticking fee, not interest. So to translate that, we would probably expect to see 1% spread and 0% floor� you show 1% spread and -2.25% floor. In looking at the assets datasheet, you can fix this by calculating the all-in-rate minus the zAdjustedWAS, rather than subtracting the Spread Libor.
		EA.LiborBaseRateFloor,
		ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.[Moody's DP Rating - WARF] = R.RatingDesc
        ),
                  -1
              ) [MoodyDPRatingId],
        ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.[Moody's CF Rating] = R.RatingDesc
        ),
                  -1
              ) MoodyCashFlowRatingId,
        ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.[Moody's DP Rating - WARF (ADJ)] = R.RatingDesc
        ),
                  -1
              ) AS MoodyCashFlowRatingAdjustedId,
        ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.RatingMoodyIssuance = R.RatingDesc
        ),
                  -1
              ) AS MoodyFacilityRatingId,
        
        CAST(EA.RecoveryRateMoody AS NUMERIC(18, 4)) * 100 AS MoodyRecovery,
        ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.[S&P Issuer Rating] = R.RatingDesc
        ),
                  -1
              ) AS SnPIssuerRatingId,
        ISNULL(
        (
            SELECT TOP 1 R.RatingId FROM CLO.Rating R WHERE EA.RatingSP = R.RatingDesc
        ),
                  -1
              ) AS SnPIssuerRatingAdjustedId,
        ISNULL(
        (
            SELECT TOP 1
                R.RatingId
            FROM CLO.Rating R
            WHERE EA.RatingSPIssue = R.RatingDesc
        ),
                  -1
              ) AS SnPFacilityRatingId,
        -1 AS SnPfacilityRatingAdjustedId,                     --SP NOT ADJUSTED PER WENDY
        -1 AS SnPRecoveryRatingId,
        CASE EA.[Moody's Outlook]
            WHEN 'NEG' THEN
                '-'
            WHEN 'POS' THEN
                '+'
            ELSE
                '0'
        END AS MoodyOutlook,
		CASE EA.[Moody's Credit Watch]
            WHEN 'On Watch for upgrade' THEN
                '+'
            WHEN 'On Watch for downgrade' THEN
                '-'
            ELSE
                'X'
        END AS MoodyWatch,
        CASE EA.RatingSPIssueCreditWatch
            WHEN 'NEG' THEN
                '-'
            WHEN 'POS' THEN
                '+'
            ELSE
                '0'
        END AS SnPWatch,
		CASE EA.[S&P Credit Watch]
            WHEN 'NEG' THEN
                '-'
            WHEN 'POS' THEN
                '+'
            ELSE
                '0'
        END AS SnpCreditWatch,
        '1/1/1900' AS NextReportingDate,                       --'***NOT NEEDED PER WILL***'
        '1/1/1900' AS FiscalYearEndDate,                       --'***NOT NEEDED PER WILL***'
        '***MISSING***' AS AgentBank,                          --'BLOOMBERG: ln_agent'
        GETDATE(),                                             -- CreatedOn - datetime
        'WSO',                                                 -- CreatedBy - varchar(100)
        GETDATE(),                                             -- LastUpdatedOn - datetime
        'WSO'                                                  -- LastUpdatedBy - varchar(100)
    FROM CLO.WsoExtractAssets EA
        JOIN @DatasetKeys DK
            ON DK.DatasetKey = EA.DatasetKey
        JOIN DataMarts.dbo.WsoDatasets D
            ON DK.DatasetKey = D.DatasetKey
    --WHERE EA.PrincipalBalance <> 0
    --GROUP BY
    --    EA.SecurityID,
    --    EA.RatingSP,
    --    EA.RatingSPIssue,
    --    EA.RatingSPIssueCreditWatch,
    --    EA.[S&P Issuer Rating],
    --    EA.MarkPrice_BidPrice,
    --    EA.SpreadLibor,
    --    EA.LiborBaseRateFloor,
    --    [Moody's CF Rating],
    --    [Moody's DP Rating - WARF (ADJ)],
    --    EA.RatingMoodyIssuance,
    --    EA.RecoveryRateMoody,
    --    EA.[Moody's Outlook]
    --ORDER BY EA.SecurityID
    --SELECT * FROM dbo.WSOExtractAssets WHERE SecurityID = 'LX133675' ORDER BY 1 desc
    COMMIT TRANSACTION
GO
PRINT N'Altering [CLO].[spGetPriceMove]...';


GO
ALTER PROCEDURE [CLO].[spGetPriceMove] @fromDateId INT = 0, @toDateId INT = 0, @sectionName VARCHAR(100)
AS
SELECT m.[DateId], m.[SecurityId], COALESCE(MAX(currentupload.[Bid]), MAX(m.[Bid]), MAX(previousupload.[Bid])) AS [Bid]
	 , MAX(cm.[CostPrice]) AS [CostPrice], MAX(cm.[MoodyCashFlowRatingAdjusted]) AS [MoodyCFR]
INTO #MarketData1
FROM CLO.MarketData m WITH (NOLOCK) LEFT JOIN CLO.vw_SecurityMarket cm WITH (NOLOCK)
	ON cm.SecurityId = m.[SecurityId]
	LEFT JOIN [CLO].[vw_Price] currentupload WITH (NOLOCK)
	ON m.DateId = currentupload.DateId AND m.SecurityId = currentupload.SecurityId
	LEFT JOIN [CLO].[vw_Price] previousupload WITH (NOLOCK)
	ON m.DateId > currentupload.DateId AND m.SecurityId = currentupload.SecurityId
	INNER JOIN CLO.Fund F
	ON F.FundId = m.FundId AND (F.IsActive = 1 OR F.IsWarehouse = 1)
WHERE m.DateId = @fromDateId
GROUP BY m.DateId, m.SecurityId;

SELECT m.[DateId], m.[SecurityId], COALESCE(MAX(currentupload.[Bid]), MAX(m.[Bid]), MAX(previousupload.[Bid])) AS [Bid]
INTO #MarketData2
FROM CLO.MarketData m WITH (NOLOCK) LEFT JOIN [CLO].[vw_Price] currentupload WITH (NOLOCK)
	ON m.DateId = currentupload.DateId AND m.SecurityId = currentupload.SecurityId
	LEFT JOIN [CLO].[vw_Price] previousupload WITH (NOLOCK)
	ON m.DateId > currentupload.DateId AND m.SecurityId = currentupload.SecurityId
	INNER JOIN CLO.Fund F
	ON F.FundId = m.FundId AND (F.IsActive = 1 OR F.IsWarehouse = 1)
WHERE m.DateId = @toDateId
GROUP BY m.DateId, m.SecurityId;

SELECT s.Issuer Issuer, m1.Bid Bid, (m1.[Bid] - m2.[Bid]) PriceMove, SUM(p.Exposure) TotalPar
	 , CLO.SafeDivideBy(SUM(p.Exposure * m1.CostPrice), SUM(p.Exposure)) CostPrice, MAX(m1.[MoodyCFR]) [MoodyCFR]
INTO #Result
FROM [CLO].[vw_Security] s LEFT JOIN [CLO].Position p WITH (NOLOCK)
ON s.SecurityId = p.SecurityId
LEFT JOIN #MarketData1 m1 WITH (NOLOCK)
ON s.SecurityId = m1.SecurityId
LEFT JOIN #MarketData2 m2 WITH (NOLOCK)
ON s.SecurityId = m2.SecurityId
WHERE p.DateId = @fromDateId AND ISNULL(m1.Bid, 0) <> 0 AND ISNULL(m2.Bid, 0) <> 0 AND m1.Bid <> m2.Bid
GROUP BY s.Issuer, m1.[Bid], m2.[Bid];

SELECT TOP 5 *, ROW_NUMBER() OVER (ORDER BY CASE WHEN @sectionName = 'Bottom' THEN p.PriceMove
											END DESC, CASE WHEN @sectionName = 'Top' THEN p.PriceMove
													  END ASC) RowNum
FROM #Result p
WHERE ISNULL(p.PriceMove, 0) <> 0 AND ISNULL(p.TotalPar, 0) <> 0 AND p.TotalPar > 1
ORDER BY RowNum;

DROP TABLE #MarketData1;
DROP TABLE #MarketData2;
DROP TABLE #Result;
GO
PRINT N'Refreshing [CLO].[LoadWso_ByDatasetKeys]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[LoadWso_ByDatasetKeys]';


GO
PRINT N'Refreshing [CLO].[LoadWso]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[LoadWso]';


GO
PRINT N'Refreshing [YDA].[CloGetAllAggPositions]...';


GO
EXECUTE sp_refreshsqlmodule N'[YDA].[CloGetAllAggPositions]';


GO
PRINT N'Refreshing [CLO].[sp_GetExcelPluginData]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[sp_GetExcelPluginData]';


GO
PRINT N'Refreshing [CLO].[spGetAllPositionForSecurities]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[spGetAllPositionForSecurities]';


GO
PRINT N'Refreshing [CLO].[spGetAllPositions]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[spGetAllPositions]';


GO
PRINT N'Refreshing [CLO].[spPositionSizeByCreditScoreByTotalCouponRuleProcessor]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[spPositionSizeByCreditScoreByTotalCouponRuleProcessor]';


GO
PRINT N'Refreshing [CLO].[spTop10Bottom10Movers]...';


GO
EXECUTE sp_refreshsqlmodule N'[CLO].[spTop10Bottom10Movers]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'CLO.Calculation'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
